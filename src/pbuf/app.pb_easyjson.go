// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package pbuf

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB46be6a3DecodeBiobtreeTmpBiobtree(in *jlexer.Lexer, out *biobtreeServiceClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB46be6a3EncodeBiobtreeTmpBiobtree(out *jwriter.Writer, in biobtreeServiceClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v biobtreeServiceClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB46be6a3EncodeBiobtreeTmpBiobtree(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v biobtreeServiceClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB46be6a3EncodeBiobtreeTmpBiobtree(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *biobtreeServiceClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB46be6a3DecodeBiobtreeTmpBiobtree(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *biobtreeServiceClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB46be6a3DecodeBiobtreeTmpBiobtree(l, v)
}
func easyjsonB46be6a3DecodeBiobtreeTmpBiobtree1(in *jlexer.Lexer, out *XrefEntry) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "domain_id":
			out.DomainId = uint32(in.Uint32())
		case "xref_id":
			out.XrefId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB46be6a3EncodeBiobtreeTmpBiobtree1(out *jwriter.Writer, in XrefEntry) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DomainId != 0 {
		const prefix string = ",\"domain_id\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.DomainId))
	}
	if in.XrefId != "" {
		const prefix string = ",\"xref_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.XrefId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v XrefEntry) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB46be6a3EncodeBiobtreeTmpBiobtree1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v XrefEntry) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB46be6a3EncodeBiobtreeTmpBiobtree1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *XrefEntry) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB46be6a3DecodeBiobtreeTmpBiobtree1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *XrefEntry) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB46be6a3DecodeBiobtreeTmpBiobtree1(l, v)
}
func easyjsonB46be6a3DecodeBiobtreeTmpBiobtree2(in *jlexer.Lexer, out *XrefDomainCount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "domain_id":
			out.DomainId = uint32(in.Uint32())
		case "count":
			out.Count = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB46be6a3EncodeBiobtreeTmpBiobtree2(out *jwriter.Writer, in XrefDomainCount) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DomainId != 0 {
		const prefix string = ",\"domain_id\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.DomainId))
	}
	if in.Count != 0 {
		const prefix string = ",\"count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v XrefDomainCount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB46be6a3EncodeBiobtreeTmpBiobtree2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v XrefDomainCount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB46be6a3EncodeBiobtreeTmpBiobtree2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *XrefDomainCount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB46be6a3DecodeBiobtreeTmpBiobtree2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *XrefDomainCount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB46be6a3DecodeBiobtreeTmpBiobtree2(l, v)
}
func easyjsonB46be6a3DecodeBiobtreeTmpBiobtree3(in *jlexer.Lexer, out *XrefAttr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "values":
			if in.IsNull() {
				in.Skip()
				out.Values = nil
			} else {
				in.Delim('[')
				if out.Values == nil {
					if !in.IsDelim(']') {
						out.Values = make([]string, 0, 4)
					} else {
						out.Values = []string{}
					}
				} else {
					out.Values = (out.Values)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Values = append(out.Values, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "childs":
			if in.IsNull() {
				in.Skip()
				out.Childs = nil
			} else {
				in.Delim('[')
				if out.Childs == nil {
					if !in.IsDelim(']') {
						out.Childs = make([]*XrefAttr, 0, 8)
					} else {
						out.Childs = []*XrefAttr{}
					}
				} else {
					out.Childs = (out.Childs)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *XrefAttr
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(XrefAttr)
						}
						(*v2).UnmarshalEasyJSON(in)
					}
					out.Childs = append(out.Childs, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB46be6a3EncodeBiobtreeTmpBiobtree3(out *jwriter.Writer, in XrefAttr) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Key != "" {
		const prefix string = ",\"key\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	if len(in.Values) != 0 {
		const prefix string = ",\"values\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v3, v4 := range in.Values {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	if len(in.Childs) != 0 {
		const prefix string = ",\"childs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Childs {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v XrefAttr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB46be6a3EncodeBiobtreeTmpBiobtree3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v XrefAttr) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB46be6a3EncodeBiobtreeTmpBiobtree3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *XrefAttr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB46be6a3DecodeBiobtreeTmpBiobtree3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *XrefAttr) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB46be6a3DecodeBiobtreeTmpBiobtree3(l, v)
}
func easyjsonB46be6a3DecodeBiobtreeTmpBiobtree4(in *jlexer.Lexer, out *Xref) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "domain_id":
			out.DomainId = uint32(in.Uint32())
		case "count":
			out.Count = uint32(in.Uint32())
		case "is_link":
			out.IsLink = bool(in.Bool())
		case "entries":
			if in.IsNull() {
				in.Skip()
				out.Entries = nil
			} else {
				in.Delim('[')
				if out.Entries == nil {
					if !in.IsDelim(']') {
						out.Entries = make([]*XrefEntry, 0, 8)
					} else {
						out.Entries = []*XrefEntry{}
					}
				} else {
					out.Entries = (out.Entries)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *XrefEntry
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(XrefEntry)
						}
						(*v7).UnmarshalEasyJSON(in)
					}
					out.Entries = append(out.Entries, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "domain_counts":
			if in.IsNull() {
				in.Skip()
				out.DomainCounts = nil
			} else {
				in.Delim('[')
				if out.DomainCounts == nil {
					if !in.IsDelim(']') {
						out.DomainCounts = make([]*XrefDomainCount, 0, 8)
					} else {
						out.DomainCounts = []*XrefDomainCount{}
					}
				} else {
					out.DomainCounts = (out.DomainCounts)[:0]
				}
				for !in.IsDelim(']') {
					var v8 *XrefDomainCount
					if in.IsNull() {
						in.Skip()
						v8 = nil
					} else {
						if v8 == nil {
							v8 = new(XrefDomainCount)
						}
						(*v8).UnmarshalEasyJSON(in)
					}
					out.DomainCounts = append(out.DomainCounts, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "attributes":
			if in.IsNull() {
				in.Skip()
				out.Attributes = nil
			} else {
				in.Delim('[')
				if out.Attributes == nil {
					if !in.IsDelim(']') {
						out.Attributes = make([]*XrefAttr, 0, 8)
					} else {
						out.Attributes = []*XrefAttr{}
					}
				} else {
					out.Attributes = (out.Attributes)[:0]
				}
				for !in.IsDelim(']') {
					var v9 *XrefAttr
					if in.IsNull() {
						in.Skip()
						v9 = nil
					} else {
						if v9 == nil {
							v9 = new(XrefAttr)
						}
						(*v9).UnmarshalEasyJSON(in)
					}
					out.Attributes = append(out.Attributes, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "identifier":
			out.Identifier = string(in.String())
		case "specialKeyword":
			out.SpecialKeyword = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB46be6a3EncodeBiobtreeTmpBiobtree4(out *jwriter.Writer, in Xref) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DomainId != 0 {
		const prefix string = ",\"domain_id\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.DomainId))
	}
	if in.Count != 0 {
		const prefix string = ",\"count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Count))
	}
	if in.IsLink {
		const prefix string = ",\"is_link\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsLink))
	}
	if len(in.Entries) != 0 {
		const prefix string = ",\"entries\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v10, v11 := range in.Entries {
				if v10 > 0 {
					out.RawByte(',')
				}
				if v11 == nil {
					out.RawString("null")
				} else {
					(*v11).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DomainCounts) != 0 {
		const prefix string = ",\"domain_counts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v12, v13 := range in.DomainCounts {
				if v12 > 0 {
					out.RawByte(',')
				}
				if v13 == nil {
					out.RawString("null")
				} else {
					(*v13).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Attributes) != 0 {
		const prefix string = ",\"attributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.Attributes {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					(*v15).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Identifier != "" {
		const prefix string = ",\"identifier\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Identifier))
	}
	if in.SpecialKeyword != "" {
		const prefix string = ",\"specialKeyword\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SpecialKeyword))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Xref) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB46be6a3EncodeBiobtreeTmpBiobtree4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Xref) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB46be6a3EncodeBiobtreeTmpBiobtree4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Xref) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB46be6a3DecodeBiobtreeTmpBiobtree4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Xref) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB46be6a3DecodeBiobtreeTmpBiobtree4(l, v)
}
func easyjsonB46be6a3DecodeBiobtreeTmpBiobtree5(in *jlexer.Lexer, out *Result) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "results":
			if in.IsNull() {
				in.Skip()
				out.Results = nil
			} else {
				in.Delim('[')
				if out.Results == nil {
					if !in.IsDelim(']') {
						out.Results = make([]*Xref, 0, 8)
					} else {
						out.Results = []*Xref{}
					}
				} else {
					out.Results = (out.Results)[:0]
				}
				for !in.IsDelim(']') {
					var v16 *Xref
					if in.IsNull() {
						in.Skip()
						v16 = nil
					} else {
						if v16 == nil {
							v16 = new(Xref)
						}
						(*v16).UnmarshalEasyJSON(in)
					}
					out.Results = append(out.Results, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB46be6a3EncodeBiobtreeTmpBiobtree5(out *jwriter.Writer, in Result) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Results) != 0 {
		const prefix string = ",\"results\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v17, v18 := range in.Results {
				if v17 > 0 {
					out.RawByte(',')
				}
				if v18 == nil {
					out.RawString("null")
				} else {
					(*v18).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Result) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB46be6a3EncodeBiobtreeTmpBiobtree5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Result) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB46be6a3EncodeBiobtreeTmpBiobtree5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Result) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB46be6a3DecodeBiobtreeTmpBiobtree5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Result) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB46be6a3DecodeBiobtreeTmpBiobtree5(l, v)
}
func easyjsonB46be6a3DecodeBiobtreeTmpBiobtree6(in *jlexer.Lexer, out *BiobtreeMetaResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "results":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Results = make(map[string]*BiobtreeMetaKeyValue)
				} else {
					out.Results = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v19 *BiobtreeMetaKeyValue
					if in.IsNull() {
						in.Skip()
						v19 = nil
					} else {
						if v19 == nil {
							v19 = new(BiobtreeMetaKeyValue)
						}
						(*v19).UnmarshalEasyJSON(in)
					}
					(out.Results)[key] = v19
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB46be6a3EncodeBiobtreeTmpBiobtree6(out *jwriter.Writer, in BiobtreeMetaResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Results) != 0 {
		const prefix string = ",\"results\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v20First := true
			for v20Name, v20Value := range in.Results {
				if v20First {
					v20First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v20Name))
				out.RawByte(':')
				if v20Value == nil {
					out.RawString("null")
				} else {
					(*v20Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BiobtreeMetaResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB46be6a3EncodeBiobtreeTmpBiobtree6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BiobtreeMetaResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB46be6a3EncodeBiobtreeTmpBiobtree6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BiobtreeMetaResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB46be6a3DecodeBiobtreeTmpBiobtree6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BiobtreeMetaResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB46be6a3DecodeBiobtreeTmpBiobtree6(l, v)
}
func easyjsonB46be6a3DecodeBiobtreeTmpBiobtree7(in *jlexer.Lexer, out *BiobtreeMetaRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB46be6a3EncodeBiobtreeTmpBiobtree7(out *jwriter.Writer, in BiobtreeMetaRequest) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BiobtreeMetaRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB46be6a3EncodeBiobtreeTmpBiobtree7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BiobtreeMetaRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB46be6a3EncodeBiobtreeTmpBiobtree7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BiobtreeMetaRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB46be6a3DecodeBiobtreeTmpBiobtree7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BiobtreeMetaRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB46be6a3DecodeBiobtreeTmpBiobtree7(l, v)
}
func easyjsonB46be6a3DecodeBiobtreeTmpBiobtree8(in *jlexer.Lexer, out *BiobtreeMetaKeyValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "keyvalues":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Keyvalues = make(map[string]string)
				} else {
					out.Keyvalues = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v21 string
					v21 = string(in.String())
					(out.Keyvalues)[key] = v21
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB46be6a3EncodeBiobtreeTmpBiobtree8(out *jwriter.Writer, in BiobtreeMetaKeyValue) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Keyvalues) != 0 {
		const prefix string = ",\"keyvalues\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v22First := true
			for v22Name, v22Value := range in.Keyvalues {
				if v22First {
					v22First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v22Name))
				out.RawByte(':')
				out.String(string(v22Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BiobtreeMetaKeyValue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB46be6a3EncodeBiobtreeTmpBiobtree8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BiobtreeMetaKeyValue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB46be6a3EncodeBiobtreeTmpBiobtree8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BiobtreeMetaKeyValue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB46be6a3DecodeBiobtreeTmpBiobtree8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BiobtreeMetaKeyValue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB46be6a3DecodeBiobtreeTmpBiobtree8(l, v)
}
func easyjsonB46be6a3DecodeBiobtreeTmpBiobtree9(in *jlexer.Lexer, out *BiobtreeGetResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "results":
			if in.IsNull() {
				in.Skip()
				out.Results = nil
			} else {
				in.Delim('[')
				if out.Results == nil {
					if !in.IsDelim(']') {
						out.Results = make([]*Result, 0, 8)
					} else {
						out.Results = []*Result{}
					}
				} else {
					out.Results = (out.Results)[:0]
				}
				for !in.IsDelim(']') {
					var v23 *Result
					if in.IsNull() {
						in.Skip()
						v23 = nil
					} else {
						if v23 == nil {
							v23 = new(Result)
						}
						(*v23).UnmarshalEasyJSON(in)
					}
					out.Results = append(out.Results, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB46be6a3EncodeBiobtreeTmpBiobtree9(out *jwriter.Writer, in BiobtreeGetResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Results) != 0 {
		const prefix string = ",\"results\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v24, v25 := range in.Results {
				if v24 > 0 {
					out.RawByte(',')
				}
				if v25 == nil {
					out.RawString("null")
				} else {
					(*v25).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BiobtreeGetResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB46be6a3EncodeBiobtreeTmpBiobtree9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BiobtreeGetResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB46be6a3EncodeBiobtreeTmpBiobtree9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BiobtreeGetResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB46be6a3DecodeBiobtreeTmpBiobtree9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BiobtreeGetResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB46be6a3DecodeBiobtreeTmpBiobtree9(l, v)
}
func easyjsonB46be6a3DecodeBiobtreeTmpBiobtree10(in *jlexer.Lexer, out *BiobtreeGetRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "keywords":
			if in.IsNull() {
				in.Skip()
				out.Keywords = nil
			} else {
				in.Delim('[')
				if out.Keywords == nil {
					if !in.IsDelim(']') {
						out.Keywords = make([]string, 0, 4)
					} else {
						out.Keywords = []string{}
					}
				} else {
					out.Keywords = (out.Keywords)[:0]
				}
				for !in.IsDelim(']') {
					var v26 string
					v26 = string(in.String())
					out.Keywords = append(out.Keywords, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB46be6a3EncodeBiobtreeTmpBiobtree10(out *jwriter.Writer, in BiobtreeGetRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Keywords) != 0 {
		const prefix string = ",\"keywords\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v27, v28 := range in.Keywords {
				if v27 > 0 {
					out.RawByte(',')
				}
				out.String(string(v28))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BiobtreeGetRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB46be6a3EncodeBiobtreeTmpBiobtree10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BiobtreeGetRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB46be6a3EncodeBiobtreeTmpBiobtree10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BiobtreeGetRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB46be6a3DecodeBiobtreeTmpBiobtree10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BiobtreeGetRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB46be6a3DecodeBiobtreeTmpBiobtree10(l, v)
}
func easyjsonB46be6a3DecodeBiobtreeTmpBiobtree11(in *jlexer.Lexer, out *BiobtreeGetPageResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "result":
			if in.IsNull() {
				in.Skip()
				out.Result = nil
			} else {
				if out.Result == nil {
					out.Result = new(Result)
				}
				(*out.Result).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB46be6a3EncodeBiobtreeTmpBiobtree11(out *jwriter.Writer, in BiobtreeGetPageResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Result != nil {
		const prefix string = ",\"result\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Result).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BiobtreeGetPageResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB46be6a3EncodeBiobtreeTmpBiobtree11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BiobtreeGetPageResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB46be6a3EncodeBiobtreeTmpBiobtree11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BiobtreeGetPageResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB46be6a3DecodeBiobtreeTmpBiobtree11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BiobtreeGetPageResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB46be6a3DecodeBiobtreeTmpBiobtree11(l, v)
}
func easyjsonB46be6a3DecodeBiobtreeTmpBiobtree12(in *jlexer.Lexer, out *BiobtreeGetPageRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "keyword":
			out.Keyword = string(in.String())
		case "dataset":
			out.Dataset = int32(in.Int32())
		case "page":
			out.Page = int32(in.Int32())
		case "total":
			out.Total = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB46be6a3EncodeBiobtreeTmpBiobtree12(out *jwriter.Writer, in BiobtreeGetPageRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Keyword != "" {
		const prefix string = ",\"keyword\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Keyword))
	}
	if in.Dataset != 0 {
		const prefix string = ",\"dataset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Dataset))
	}
	if in.Page != 0 {
		const prefix string = ",\"page\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Page))
	}
	if in.Total != 0 {
		const prefix string = ",\"total\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Total))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BiobtreeGetPageRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB46be6a3EncodeBiobtreeTmpBiobtree12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BiobtreeGetPageRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB46be6a3EncodeBiobtreeTmpBiobtree12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BiobtreeGetPageRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB46be6a3DecodeBiobtreeTmpBiobtree12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BiobtreeGetPageRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB46be6a3DecodeBiobtreeTmpBiobtree12(l, v)
}
func easyjsonB46be6a3DecodeBiobtreeTmpBiobtree13(in *jlexer.Lexer, out *BiobtreeFilterResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "result":
			if in.IsNull() {
				in.Skip()
				out.Result = nil
			} else {
				if out.Result == nil {
					out.Result = new(Result)
				}
				(*out.Result).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB46be6a3EncodeBiobtreeTmpBiobtree13(out *jwriter.Writer, in BiobtreeFilterResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Result != nil {
		const prefix string = ",\"result\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Result).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BiobtreeFilterResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB46be6a3EncodeBiobtreeTmpBiobtree13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BiobtreeFilterResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB46be6a3EncodeBiobtreeTmpBiobtree13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BiobtreeFilterResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB46be6a3DecodeBiobtreeTmpBiobtree13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BiobtreeFilterResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB46be6a3DecodeBiobtreeTmpBiobtree13(l, v)
}
func easyjsonB46be6a3DecodeBiobtreeTmpBiobtree14(in *jlexer.Lexer, out *BiobtreeFilterRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "keyword":
			out.Keyword = string(in.String())
		case "dataset":
			out.Dataset = int32(in.Int32())
		case "filters":
			if in.IsNull() {
				in.Skip()
				out.Filters = nil
			} else {
				in.Delim('[')
				if out.Filters == nil {
					if !in.IsDelim(']') {
						out.Filters = make([]uint32, 0, 16)
					} else {
						out.Filters = []uint32{}
					}
				} else {
					out.Filters = (out.Filters)[:0]
				}
				for !in.IsDelim(']') {
					var v29 uint32
					v29 = uint32(in.Uint32())
					out.Filters = append(out.Filters, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "page":
			out.Page = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB46be6a3EncodeBiobtreeTmpBiobtree14(out *jwriter.Writer, in BiobtreeFilterRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Keyword != "" {
		const prefix string = ",\"keyword\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Keyword))
	}
	if in.Dataset != 0 {
		const prefix string = ",\"dataset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Dataset))
	}
	if len(in.Filters) != 0 {
		const prefix string = ",\"filters\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v30, v31 := range in.Filters {
				if v30 > 0 {
					out.RawByte(',')
				}
				out.Uint32(uint32(v31))
			}
			out.RawByte(']')
		}
	}
	if in.Page != 0 {
		const prefix string = ",\"page\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Page))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BiobtreeFilterRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB46be6a3EncodeBiobtreeTmpBiobtree14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BiobtreeFilterRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB46be6a3EncodeBiobtreeTmpBiobtree14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BiobtreeFilterRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB46be6a3DecodeBiobtreeTmpBiobtree14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BiobtreeFilterRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB46be6a3DecodeBiobtreeTmpBiobtree14(l, v)
}
