// Code generated by protoc-gen-go. DO NOT EDIT.
// source: attr.proto

package pbuf

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Ensemblbranch int32

const (
	Ensemblbranch_NONE     Ensemblbranch = 0
	Ensemblbranch_ENSEMBL  Ensemblbranch = 1
	Ensemblbranch_BACTERIA Ensemblbranch = 2
	Ensemblbranch_FUNGI    Ensemblbranch = 3
	Ensemblbranch_METAZOA  Ensemblbranch = 4
	Ensemblbranch_PLANT    Ensemblbranch = 5
	Ensemblbranch_PROTIST  Ensemblbranch = 6
)

var Ensemblbranch_name = map[int32]string{
	0: "NONE",
	1: "ENSEMBL",
	2: "BACTERIA",
	3: "FUNGI",
	4: "METAZOA",
	5: "PLANT",
	6: "PROTIST",
}

var Ensemblbranch_value = map[string]int32{
	"NONE":     0,
	"ENSEMBL":  1,
	"BACTERIA": 2,
	"FUNGI":    3,
	"METAZOA":  4,
	"PLANT":    5,
	"PROTIST":  6,
}

func (x Ensemblbranch) String() string {
	return proto.EnumName(Ensemblbranch_name, int32(x))
}

func (Ensemblbranch) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_044920aba15ba186, []int{0}
}

type OntologyAttr struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Synonyms             []string `protobuf:"bytes,3,rep,name=synonyms,proto3" json:"synonyms,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OntologyAttr) Reset()         { *m = OntologyAttr{} }
func (m *OntologyAttr) String() string { return proto.CompactTextString(m) }
func (*OntologyAttr) ProtoMessage()    {}
func (*OntologyAttr) Descriptor() ([]byte, []int) {
	return fileDescriptor_044920aba15ba186, []int{0}
}

func (m *OntologyAttr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OntologyAttr.Unmarshal(m, b)
}
func (m *OntologyAttr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OntologyAttr.Marshal(b, m, deterministic)
}
func (m *OntologyAttr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OntologyAttr.Merge(m, src)
}
func (m *OntologyAttr) XXX_Size() int {
	return xxx_messageInfo_OntologyAttr.Size(m)
}
func (m *OntologyAttr) XXX_DiscardUnknown() {
	xxx_messageInfo_OntologyAttr.DiscardUnknown(m)
}

var xxx_messageInfo_OntologyAttr proto.InternalMessageInfo

func (m *OntologyAttr) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *OntologyAttr) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OntologyAttr) GetSynonyms() []string {
	if m != nil {
		return m.Synonyms
	}
	return nil
}

type HgncAttr struct {
	Names                []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	Symbols              []string `protobuf:"bytes,2,rep,name=symbols,proto3" json:"symbols,omitempty"`
	LocusGroup           string   `protobuf:"bytes,3,opt,name=locus_group,json=locusGroup,proto3" json:"locus_group,omitempty"`
	Location             string   `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	Aliases              []string `protobuf:"bytes,5,rep,name=aliases,proto3" json:"aliases,omitempty"`
	LocusType            string   `protobuf:"bytes,6,opt,name=locus_type,json=locusType,proto3" json:"locus_type,omitempty"`
	PrevNames            []string `protobuf:"bytes,7,rep,name=prev_names,json=prevNames,proto3" json:"prev_names,omitempty"`
	PrevSymbols          []string `protobuf:"bytes,8,rep,name=prev_symbols,json=prevSymbols,proto3" json:"prev_symbols,omitempty"`
	Status               string   `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	GeneGroups           []string `protobuf:"bytes,10,rep,name=gene_groups,json=geneGroups,proto3" json:"gene_groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HgncAttr) Reset()         { *m = HgncAttr{} }
func (m *HgncAttr) String() string { return proto.CompactTextString(m) }
func (*HgncAttr) ProtoMessage()    {}
func (*HgncAttr) Descriptor() ([]byte, []int) {
	return fileDescriptor_044920aba15ba186, []int{1}
}

func (m *HgncAttr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HgncAttr.Unmarshal(m, b)
}
func (m *HgncAttr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HgncAttr.Marshal(b, m, deterministic)
}
func (m *HgncAttr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HgncAttr.Merge(m, src)
}
func (m *HgncAttr) XXX_Size() int {
	return xxx_messageInfo_HgncAttr.Size(m)
}
func (m *HgncAttr) XXX_DiscardUnknown() {
	xxx_messageInfo_HgncAttr.DiscardUnknown(m)
}

var xxx_messageInfo_HgncAttr proto.InternalMessageInfo

func (m *HgncAttr) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *HgncAttr) GetSymbols() []string {
	if m != nil {
		return m.Symbols
	}
	return nil
}

func (m *HgncAttr) GetLocusGroup() string {
	if m != nil {
		return m.LocusGroup
	}
	return ""
}

func (m *HgncAttr) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *HgncAttr) GetAliases() []string {
	if m != nil {
		return m.Aliases
	}
	return nil
}

func (m *HgncAttr) GetLocusType() string {
	if m != nil {
		return m.LocusType
	}
	return ""
}

func (m *HgncAttr) GetPrevNames() []string {
	if m != nil {
		return m.PrevNames
	}
	return nil
}

func (m *HgncAttr) GetPrevSymbols() []string {
	if m != nil {
		return m.PrevSymbols
	}
	return nil
}

func (m *HgncAttr) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *HgncAttr) GetGeneGroups() []string {
	if m != nil {
		return m.GeneGroups
	}
	return nil
}

type InterproAttr struct {
	Names                []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	ShortName            string   `protobuf:"bytes,2,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Type                 string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	ProteinCount         int32    `protobuf:"varint,4,opt,name=protein_count,json=proteinCount,proto3" json:"protein_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InterproAttr) Reset()         { *m = InterproAttr{} }
func (m *InterproAttr) String() string { return proto.CompactTextString(m) }
func (*InterproAttr) ProtoMessage()    {}
func (*InterproAttr) Descriptor() ([]byte, []int) {
	return fileDescriptor_044920aba15ba186, []int{2}
}

func (m *InterproAttr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InterproAttr.Unmarshal(m, b)
}
func (m *InterproAttr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InterproAttr.Marshal(b, m, deterministic)
}
func (m *InterproAttr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterproAttr.Merge(m, src)
}
func (m *InterproAttr) XXX_Size() int {
	return xxx_messageInfo_InterproAttr.Size(m)
}
func (m *InterproAttr) XXX_DiscardUnknown() {
	xxx_messageInfo_InterproAttr.DiscardUnknown(m)
}

var xxx_messageInfo_InterproAttr proto.InternalMessageInfo

func (m *InterproAttr) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *InterproAttr) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *InterproAttr) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *InterproAttr) GetProteinCount() int32 {
	if m != nil {
		return m.ProteinCount
	}
	return 0
}

type EnsemblAttr struct {
	Name                 string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description          string        `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Start                int32         `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	End                  int32         `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
	Biotype              string        `protobuf:"bytes,5,opt,name=biotype,proto3" json:"biotype,omitempty"`
	Genome               string        `protobuf:"bytes,6,opt,name=genome,proto3" json:"genome,omitempty"`
	Strand               string        `protobuf:"bytes,7,opt,name=strand,proto3" json:"strand,omitempty"`
	SeqRegionName        string        `protobuf:"bytes,8,opt,name=seq_region_name,json=seqRegionName,proto3" json:"seq_region_name,omitempty"`
	Branch               Ensemblbranch `protobuf:"varint,9,opt,name=branch,proto3,enum=pbuf.Ensemblbranch" json:"branch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *EnsemblAttr) Reset()         { *m = EnsemblAttr{} }
func (m *EnsemblAttr) String() string { return proto.CompactTextString(m) }
func (*EnsemblAttr) ProtoMessage()    {}
func (*EnsemblAttr) Descriptor() ([]byte, []int) {
	return fileDescriptor_044920aba15ba186, []int{3}
}

func (m *EnsemblAttr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnsemblAttr.Unmarshal(m, b)
}
func (m *EnsemblAttr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnsemblAttr.Marshal(b, m, deterministic)
}
func (m *EnsemblAttr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnsemblAttr.Merge(m, src)
}
func (m *EnsemblAttr) XXX_Size() int {
	return xxx_messageInfo_EnsemblAttr.Size(m)
}
func (m *EnsemblAttr) XXX_DiscardUnknown() {
	xxx_messageInfo_EnsemblAttr.DiscardUnknown(m)
}

var xxx_messageInfo_EnsemblAttr proto.InternalMessageInfo

func (m *EnsemblAttr) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EnsemblAttr) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *EnsemblAttr) GetStart() int32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *EnsemblAttr) GetEnd() int32 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *EnsemblAttr) GetBiotype() string {
	if m != nil {
		return m.Biotype
	}
	return ""
}

func (m *EnsemblAttr) GetGenome() string {
	if m != nil {
		return m.Genome
	}
	return ""
}

func (m *EnsemblAttr) GetStrand() string {
	if m != nil {
		return m.Strand
	}
	return ""
}

func (m *EnsemblAttr) GetSeqRegionName() string {
	if m != nil {
		return m.SeqRegionName
	}
	return ""
}

func (m *EnsemblAttr) GetBranch() Ensemblbranch {
	if m != nil {
		return m.Branch
	}
	return Ensemblbranch_NONE
}

type TaxoAttr struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CommonName           string   `protobuf:"bytes,2,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	Rank                 int32    `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
	TaxonomicDivision    string   `protobuf:"bytes,4,opt,name=taxonomic_division,json=taxonomicDivision,proto3" json:"taxonomic_division,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaxoAttr) Reset()         { *m = TaxoAttr{} }
func (m *TaxoAttr) String() string { return proto.CompactTextString(m) }
func (*TaxoAttr) ProtoMessage()    {}
func (*TaxoAttr) Descriptor() ([]byte, []int) {
	return fileDescriptor_044920aba15ba186, []int{4}
}

func (m *TaxoAttr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaxoAttr.Unmarshal(m, b)
}
func (m *TaxoAttr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaxoAttr.Marshal(b, m, deterministic)
}
func (m *TaxoAttr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaxoAttr.Merge(m, src)
}
func (m *TaxoAttr) XXX_Size() int {
	return xxx_messageInfo_TaxoAttr.Size(m)
}
func (m *TaxoAttr) XXX_DiscardUnknown() {
	xxx_messageInfo_TaxoAttr.DiscardUnknown(m)
}

var xxx_messageInfo_TaxoAttr proto.InternalMessageInfo

func (m *TaxoAttr) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TaxoAttr) GetCommonName() string {
	if m != nil {
		return m.CommonName
	}
	return ""
}

func (m *TaxoAttr) GetRank() int32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *TaxoAttr) GetTaxonomicDivision() string {
	if m != nil {
		return m.TaxonomicDivision
	}
	return ""
}

type EnaAttr struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnaAttr) Reset()         { *m = EnaAttr{} }
func (m *EnaAttr) String() string { return proto.CompactTextString(m) }
func (*EnaAttr) ProtoMessage()    {}
func (*EnaAttr) Descriptor() ([]byte, []int) {
	return fileDescriptor_044920aba15ba186, []int{5}
}

func (m *EnaAttr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnaAttr.Unmarshal(m, b)
}
func (m *EnaAttr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnaAttr.Marshal(b, m, deterministic)
}
func (m *EnaAttr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnaAttr.Merge(m, src)
}
func (m *EnaAttr) XXX_Size() int {
	return xxx_messageInfo_EnaAttr.Size(m)
}
func (m *EnaAttr) XXX_DiscardUnknown() {
	xxx_messageInfo_EnaAttr.DiscardUnknown(m)
}

var xxx_messageInfo_EnaAttr proto.InternalMessageInfo

func (m *EnaAttr) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type PdbAttr struct {
	Method               string   `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Chains               string   `protobuf:"bytes,2,opt,name=chains,proto3" json:"chains,omitempty"`
	Resolution           string   `protobuf:"bytes,3,opt,name=resolution,proto3" json:"resolution,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PdbAttr) Reset()         { *m = PdbAttr{} }
func (m *PdbAttr) String() string { return proto.CompactTextString(m) }
func (*PdbAttr) ProtoMessage()    {}
func (*PdbAttr) Descriptor() ([]byte, []int) {
	return fileDescriptor_044920aba15ba186, []int{6}
}

func (m *PdbAttr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PdbAttr.Unmarshal(m, b)
}
func (m *PdbAttr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PdbAttr.Marshal(b, m, deterministic)
}
func (m *PdbAttr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PdbAttr.Merge(m, src)
}
func (m *PdbAttr) XXX_Size() int {
	return xxx_messageInfo_PdbAttr.Size(m)
}
func (m *PdbAttr) XXX_DiscardUnknown() {
	xxx_messageInfo_PdbAttr.DiscardUnknown(m)
}

var xxx_messageInfo_PdbAttr proto.InternalMessageInfo

func (m *PdbAttr) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *PdbAttr) GetChains() string {
	if m != nil {
		return m.Chains
	}
	return ""
}

func (m *PdbAttr) GetResolution() string {
	if m != nil {
		return m.Resolution
	}
	return ""
}

type DrugbankAttr struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DrugbankAttr) Reset()         { *m = DrugbankAttr{} }
func (m *DrugbankAttr) String() string { return proto.CompactTextString(m) }
func (*DrugbankAttr) ProtoMessage()    {}
func (*DrugbankAttr) Descriptor() ([]byte, []int) {
	return fileDescriptor_044920aba15ba186, []int{7}
}

func (m *DrugbankAttr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DrugbankAttr.Unmarshal(m, b)
}
func (m *DrugbankAttr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DrugbankAttr.Marshal(b, m, deterministic)
}
func (m *DrugbankAttr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DrugbankAttr.Merge(m, src)
}
func (m *DrugbankAttr) XXX_Size() int {
	return xxx_messageInfo_DrugbankAttr.Size(m)
}
func (m *DrugbankAttr) XXX_DiscardUnknown() {
	xxx_messageInfo_DrugbankAttr.DiscardUnknown(m)
}

var xxx_messageInfo_DrugbankAttr proto.InternalMessageInfo

func (m *DrugbankAttr) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type OrphanetAttr struct {
	Disease              string   `protobuf:"bytes,1,opt,name=disease,proto3" json:"disease,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrphanetAttr) Reset()         { *m = OrphanetAttr{} }
func (m *OrphanetAttr) String() string { return proto.CompactTextString(m) }
func (*OrphanetAttr) ProtoMessage()    {}
func (*OrphanetAttr) Descriptor() ([]byte, []int) {
	return fileDescriptor_044920aba15ba186, []int{8}
}

func (m *OrphanetAttr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrphanetAttr.Unmarshal(m, b)
}
func (m *OrphanetAttr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrphanetAttr.Marshal(b, m, deterministic)
}
func (m *OrphanetAttr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrphanetAttr.Merge(m, src)
}
func (m *OrphanetAttr) XXX_Size() int {
	return xxx_messageInfo_OrphanetAttr.Size(m)
}
func (m *OrphanetAttr) XXX_DiscardUnknown() {
	xxx_messageInfo_OrphanetAttr.DiscardUnknown(m)
}

var xxx_messageInfo_OrphanetAttr proto.InternalMessageInfo

func (m *OrphanetAttr) GetDisease() string {
	if m != nil {
		return m.Disease
	}
	return ""
}

type ReactomeAttr struct {
	Pathway              string   `protobuf:"bytes,1,opt,name=pathway,proto3" json:"pathway,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReactomeAttr) Reset()         { *m = ReactomeAttr{} }
func (m *ReactomeAttr) String() string { return proto.CompactTextString(m) }
func (*ReactomeAttr) ProtoMessage()    {}
func (*ReactomeAttr) Descriptor() ([]byte, []int) {
	return fileDescriptor_044920aba15ba186, []int{9}
}

func (m *ReactomeAttr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReactomeAttr.Unmarshal(m, b)
}
func (m *ReactomeAttr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReactomeAttr.Marshal(b, m, deterministic)
}
func (m *ReactomeAttr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReactomeAttr.Merge(m, src)
}
func (m *ReactomeAttr) XXX_Size() int {
	return xxx_messageInfo_ReactomeAttr.Size(m)
}
func (m *ReactomeAttr) XXX_DiscardUnknown() {
	xxx_messageInfo_ReactomeAttr.DiscardUnknown(m)
}

var xxx_messageInfo_ReactomeAttr proto.InternalMessageInfo

func (m *ReactomeAttr) GetPathway() string {
	if m != nil {
		return m.Pathway
	}
	return ""
}

type UniprotAttr struct {
	Accessions           []string     `protobuf:"bytes,1,rep,name=accessions,proto3" json:"accessions,omitempty"`
	Genes                []string     `protobuf:"bytes,2,rep,name=genes,proto3" json:"genes,omitempty"`
	Names                []string     `protobuf:"bytes,3,rep,name=names,proto3" json:"names,omitempty"`
	AlternativeNames     []string     `protobuf:"bytes,4,rep,name=alternative_names,json=alternativeNames,proto3" json:"alternative_names,omitempty"`
	SubmittedNames       []string     `protobuf:"bytes,5,rep,name=submitted_names,json=submittedNames,proto3" json:"submitted_names,omitempty"`
	Sequence             *UniSequence `protobuf:"bytes,7,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Reviewed             bool         `protobuf:"varint,8,opt,name=reviewed,proto3" json:"reviewed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UniprotAttr) Reset()         { *m = UniprotAttr{} }
func (m *UniprotAttr) String() string { return proto.CompactTextString(m) }
func (*UniprotAttr) ProtoMessage()    {}
func (*UniprotAttr) Descriptor() ([]byte, []int) {
	return fileDescriptor_044920aba15ba186, []int{10}
}

func (m *UniprotAttr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UniprotAttr.Unmarshal(m, b)
}
func (m *UniprotAttr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UniprotAttr.Marshal(b, m, deterministic)
}
func (m *UniprotAttr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UniprotAttr.Merge(m, src)
}
func (m *UniprotAttr) XXX_Size() int {
	return xxx_messageInfo_UniprotAttr.Size(m)
}
func (m *UniprotAttr) XXX_DiscardUnknown() {
	xxx_messageInfo_UniprotAttr.DiscardUnknown(m)
}

var xxx_messageInfo_UniprotAttr proto.InternalMessageInfo

func (m *UniprotAttr) GetAccessions() []string {
	if m != nil {
		return m.Accessions
	}
	return nil
}

func (m *UniprotAttr) GetGenes() []string {
	if m != nil {
		return m.Genes
	}
	return nil
}

func (m *UniprotAttr) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *UniprotAttr) GetAlternativeNames() []string {
	if m != nil {
		return m.AlternativeNames
	}
	return nil
}

func (m *UniprotAttr) GetSubmittedNames() []string {
	if m != nil {
		return m.SubmittedNames
	}
	return nil
}

func (m *UniprotAttr) GetSequence() *UniSequence {
	if m != nil {
		return m.Sequence
	}
	return nil
}

func (m *UniprotAttr) GetReviewed() bool {
	if m != nil {
		return m.Reviewed
	}
	return false
}

type UniSequence struct {
	Seq                  string   `protobuf:"bytes,1,opt,name=seq,proto3" json:"seq,omitempty"`
	Mass                 int32    `protobuf:"varint,2,opt,name=mass,proto3" json:"mass,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UniSequence) Reset()         { *m = UniSequence{} }
func (m *UniSequence) String() string { return proto.CompactTextString(m) }
func (*UniSequence) ProtoMessage()    {}
func (*UniSequence) Descriptor() ([]byte, []int) {
	return fileDescriptor_044920aba15ba186, []int{11}
}

func (m *UniSequence) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UniSequence.Unmarshal(m, b)
}
func (m *UniSequence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UniSequence.Marshal(b, m, deterministic)
}
func (m *UniSequence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UniSequence.Merge(m, src)
}
func (m *UniSequence) XXX_Size() int {
	return xxx_messageInfo_UniSequence.Size(m)
}
func (m *UniSequence) XXX_DiscardUnknown() {
	xxx_messageInfo_UniSequence.DiscardUnknown(m)
}

var xxx_messageInfo_UniSequence proto.InternalMessageInfo

func (m *UniSequence) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *UniSequence) GetMass() int32 {
	if m != nil {
		return m.Mass
	}
	return 0
}

type UniprotFeatureAttr struct {
	Type                 string                    `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Description          string                    `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Id                   string                    `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Evidences            []*UniprotFeatureEvidence `protobuf:"bytes,4,rep,name=evidences,proto3" json:"evidences,omitempty"`
	Original             string                    `protobuf:"bytes,5,opt,name=original,proto3" json:"original,omitempty"`
	Variation            string                    `protobuf:"bytes,6,opt,name=variation,proto3" json:"variation,omitempty"`
	Location             *UniLocation              `protobuf:"bytes,7,opt,name=location,proto3" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *UniprotFeatureAttr) Reset()         { *m = UniprotFeatureAttr{} }
func (m *UniprotFeatureAttr) String() string { return proto.CompactTextString(m) }
func (*UniprotFeatureAttr) ProtoMessage()    {}
func (*UniprotFeatureAttr) Descriptor() ([]byte, []int) {
	return fileDescriptor_044920aba15ba186, []int{12}
}

func (m *UniprotFeatureAttr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UniprotFeatureAttr.Unmarshal(m, b)
}
func (m *UniprotFeatureAttr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UniprotFeatureAttr.Marshal(b, m, deterministic)
}
func (m *UniprotFeatureAttr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UniprotFeatureAttr.Merge(m, src)
}
func (m *UniprotFeatureAttr) XXX_Size() int {
	return xxx_messageInfo_UniprotFeatureAttr.Size(m)
}
func (m *UniprotFeatureAttr) XXX_DiscardUnknown() {
	xxx_messageInfo_UniprotFeatureAttr.DiscardUnknown(m)
}

var xxx_messageInfo_UniprotFeatureAttr proto.InternalMessageInfo

func (m *UniprotFeatureAttr) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *UniprotFeatureAttr) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UniprotFeatureAttr) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UniprotFeatureAttr) GetEvidences() []*UniprotFeatureEvidence {
	if m != nil {
		return m.Evidences
	}
	return nil
}

func (m *UniprotFeatureAttr) GetOriginal() string {
	if m != nil {
		return m.Original
	}
	return ""
}

func (m *UniprotFeatureAttr) GetVariation() string {
	if m != nil {
		return m.Variation
	}
	return ""
}

func (m *UniprotFeatureAttr) GetLocation() *UniLocation {
	if m != nil {
		return m.Location
	}
	return nil
}

type UniprotFeatureEvidence struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Source               string   `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Id                   string   `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UniprotFeatureEvidence) Reset()         { *m = UniprotFeatureEvidence{} }
func (m *UniprotFeatureEvidence) String() string { return proto.CompactTextString(m) }
func (*UniprotFeatureEvidence) ProtoMessage()    {}
func (*UniprotFeatureEvidence) Descriptor() ([]byte, []int) {
	return fileDescriptor_044920aba15ba186, []int{13}
}

func (m *UniprotFeatureEvidence) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UniprotFeatureEvidence.Unmarshal(m, b)
}
func (m *UniprotFeatureEvidence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UniprotFeatureEvidence.Marshal(b, m, deterministic)
}
func (m *UniprotFeatureEvidence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UniprotFeatureEvidence.Merge(m, src)
}
func (m *UniprotFeatureEvidence) XXX_Size() int {
	return xxx_messageInfo_UniprotFeatureEvidence.Size(m)
}
func (m *UniprotFeatureEvidence) XXX_DiscardUnknown() {
	xxx_messageInfo_UniprotFeatureEvidence.DiscardUnknown(m)
}

var xxx_messageInfo_UniprotFeatureEvidence proto.InternalMessageInfo

func (m *UniprotFeatureEvidence) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *UniprotFeatureEvidence) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *UniprotFeatureEvidence) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type UniLocation struct {
	Begin                int32    `protobuf:"varint,1,opt,name=begin,proto3" json:"begin,omitempty"`
	End                  int32    `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UniLocation) Reset()         { *m = UniLocation{} }
func (m *UniLocation) String() string { return proto.CompactTextString(m) }
func (*UniLocation) ProtoMessage()    {}
func (*UniLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_044920aba15ba186, []int{14}
}

func (m *UniLocation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UniLocation.Unmarshal(m, b)
}
func (m *UniLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UniLocation.Marshal(b, m, deterministic)
}
func (m *UniLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UniLocation.Merge(m, src)
}
func (m *UniLocation) XXX_Size() int {
	return xxx_messageInfo_UniLocation.Size(m)
}
func (m *UniLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_UniLocation.DiscardUnknown(m)
}

var xxx_messageInfo_UniLocation proto.InternalMessageInfo

func (m *UniLocation) GetBegin() int32 {
	if m != nil {
		return m.Begin
	}
	return 0
}

func (m *UniLocation) GetEnd() int32 {
	if m != nil {
		return m.End
	}
	return 0
}

type ChemblAttr struct {
	Doc                  *ChemblDocument        `protobuf:"bytes,1,opt,name=doc,proto3" json:"doc,omitempty"`
	Assay                *ChemblAssay           `protobuf:"bytes,2,opt,name=assay,proto3" json:"assay,omitempty"`
	Activity             *ChemblActivity        `protobuf:"bytes,3,opt,name=activity,proto3" json:"activity,omitempty"`
	Molecule             *ChemblMolecule        `protobuf:"bytes,4,opt,name=molecule,proto3" json:"molecule,omitempty"`
	Target               *ChemblTarget          `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
	TargetComponent      *ChemblTargetComponent `protobuf:"bytes,6,opt,name=targetComponent,proto3" json:"targetComponent,omitempty"`
	CellLine             *ChemblCellLine        `protobuf:"bytes,7,opt,name=cellLine,proto3" json:"cellLine,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ChemblAttr) Reset()         { *m = ChemblAttr{} }
func (m *ChemblAttr) String() string { return proto.CompactTextString(m) }
func (*ChemblAttr) ProtoMessage()    {}
func (*ChemblAttr) Descriptor() ([]byte, []int) {
	return fileDescriptor_044920aba15ba186, []int{15}
}

func (m *ChemblAttr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChemblAttr.Unmarshal(m, b)
}
func (m *ChemblAttr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChemblAttr.Marshal(b, m, deterministic)
}
func (m *ChemblAttr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChemblAttr.Merge(m, src)
}
func (m *ChemblAttr) XXX_Size() int {
	return xxx_messageInfo_ChemblAttr.Size(m)
}
func (m *ChemblAttr) XXX_DiscardUnknown() {
	xxx_messageInfo_ChemblAttr.DiscardUnknown(m)
}

var xxx_messageInfo_ChemblAttr proto.InternalMessageInfo

func (m *ChemblAttr) GetDoc() *ChemblDocument {
	if m != nil {
		return m.Doc
	}
	return nil
}

func (m *ChemblAttr) GetAssay() *ChemblAssay {
	if m != nil {
		return m.Assay
	}
	return nil
}

func (m *ChemblAttr) GetActivity() *ChemblActivity {
	if m != nil {
		return m.Activity
	}
	return nil
}

func (m *ChemblAttr) GetMolecule() *ChemblMolecule {
	if m != nil {
		return m.Molecule
	}
	return nil
}

func (m *ChemblAttr) GetTarget() *ChemblTarget {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *ChemblAttr) GetTargetComponent() *ChemblTargetComponent {
	if m != nil {
		return m.TargetComponent
	}
	return nil
}

func (m *ChemblAttr) GetCellLine() *ChemblCellLine {
	if m != nil {
		return m.CellLine
	}
	return nil
}

type ChemblDocument struct {
	Title                string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Journal              string   `protobuf:"bytes,3,opt,name=journal,proto3" json:"journal,omitempty"`
	JournalShortName     string   `protobuf:"bytes,4,opt,name=journalShortName,proto3" json:"journalShortName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChemblDocument) Reset()         { *m = ChemblDocument{} }
func (m *ChemblDocument) String() string { return proto.CompactTextString(m) }
func (*ChemblDocument) ProtoMessage()    {}
func (*ChemblDocument) Descriptor() ([]byte, []int) {
	return fileDescriptor_044920aba15ba186, []int{16}
}

func (m *ChemblDocument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChemblDocument.Unmarshal(m, b)
}
func (m *ChemblDocument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChemblDocument.Marshal(b, m, deterministic)
}
func (m *ChemblDocument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChemblDocument.Merge(m, src)
}
func (m *ChemblDocument) XXX_Size() int {
	return xxx_messageInfo_ChemblDocument.Size(m)
}
func (m *ChemblDocument) XXX_DiscardUnknown() {
	xxx_messageInfo_ChemblDocument.DiscardUnknown(m)
}

var xxx_messageInfo_ChemblDocument proto.InternalMessageInfo

func (m *ChemblDocument) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ChemblDocument) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ChemblDocument) GetJournal() string {
	if m != nil {
		return m.Journal
	}
	return ""
}

func (m *ChemblDocument) GetJournalShortName() string {
	if m != nil {
		return m.JournalShortName
	}
	return ""
}

type ChemblActivity struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Relation             string   `protobuf:"bytes,2,opt,name=relation,proto3" json:"relation,omitempty"`
	Value                float64  `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	Units                string   `protobuf:"bytes,4,opt,name=units,proto3" json:"units,omitempty"`
	StandardType         string   `protobuf:"bytes,5,opt,name=standardType,proto3" json:"standardType,omitempty"`
	StandardRelation     string   `protobuf:"bytes,6,opt,name=standardRelation,proto3" json:"standardRelation,omitempty"`
	StandardValue        float64  `protobuf:"fixed64,7,opt,name=standardValue,proto3" json:"standardValue,omitempty"`
	StandardUnits        string   `protobuf:"bytes,8,opt,name=standardUnits,proto3" json:"standardUnits,omitempty"`
	DataValidityIssue    string   `protobuf:"bytes,9,opt,name=dataValidityIssue,proto3" json:"dataValidityIssue,omitempty"`
	DataValidityComment  string   `protobuf:"bytes,10,opt,name=dataValidityComment,proto3" json:"dataValidityComment,omitempty"`
	PChembl              float64  `protobuf:"fixed64,11,opt,name=pChembl,proto3" json:"pChembl,omitempty"`
	ActivityComment      string   `protobuf:"bytes,12,opt,name=activityComment,proto3" json:"activityComment,omitempty"`
	PotentialDuplicate   string   `protobuf:"bytes,13,opt,name=potentialDuplicate,proto3" json:"potentialDuplicate,omitempty"`
	Bao                  string   `protobuf:"bytes,14,opt,name=bao,proto3" json:"bao,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChemblActivity) Reset()         { *m = ChemblActivity{} }
func (m *ChemblActivity) String() string { return proto.CompactTextString(m) }
func (*ChemblActivity) ProtoMessage()    {}
func (*ChemblActivity) Descriptor() ([]byte, []int) {
	return fileDescriptor_044920aba15ba186, []int{17}
}

func (m *ChemblActivity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChemblActivity.Unmarshal(m, b)
}
func (m *ChemblActivity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChemblActivity.Marshal(b, m, deterministic)
}
func (m *ChemblActivity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChemblActivity.Merge(m, src)
}
func (m *ChemblActivity) XXX_Size() int {
	return xxx_messageInfo_ChemblActivity.Size(m)
}
func (m *ChemblActivity) XXX_DiscardUnknown() {
	xxx_messageInfo_ChemblActivity.DiscardUnknown(m)
}

var xxx_messageInfo_ChemblActivity proto.InternalMessageInfo

func (m *ChemblActivity) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ChemblActivity) GetRelation() string {
	if m != nil {
		return m.Relation
	}
	return ""
}

func (m *ChemblActivity) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *ChemblActivity) GetUnits() string {
	if m != nil {
		return m.Units
	}
	return ""
}

func (m *ChemblActivity) GetStandardType() string {
	if m != nil {
		return m.StandardType
	}
	return ""
}

func (m *ChemblActivity) GetStandardRelation() string {
	if m != nil {
		return m.StandardRelation
	}
	return ""
}

func (m *ChemblActivity) GetStandardValue() float64 {
	if m != nil {
		return m.StandardValue
	}
	return 0
}

func (m *ChemblActivity) GetStandardUnits() string {
	if m != nil {
		return m.StandardUnits
	}
	return ""
}

func (m *ChemblActivity) GetDataValidityIssue() string {
	if m != nil {
		return m.DataValidityIssue
	}
	return ""
}

func (m *ChemblActivity) GetDataValidityComment() string {
	if m != nil {
		return m.DataValidityComment
	}
	return ""
}

func (m *ChemblActivity) GetPChembl() float64 {
	if m != nil {
		return m.PChembl
	}
	return 0
}

func (m *ChemblActivity) GetActivityComment() string {
	if m != nil {
		return m.ActivityComment
	}
	return ""
}

func (m *ChemblActivity) GetPotentialDuplicate() string {
	if m != nil {
		return m.PotentialDuplicate
	}
	return ""
}

func (m *ChemblActivity) GetBao() string {
	if m != nil {
		return m.Bao
	}
	return ""
}

type ChemblMolecule struct {
	Desc                    string              `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
	HighestDevelopmentPhase int32               `protobuf:"varint,2,opt,name=highestDevelopmentPhase,proto3" json:"highestDevelopmentPhase,omitempty"`
	AltNames                []string            `protobuf:"bytes,3,rep,name=altNames,proto3" json:"altNames,omitempty"`
	AtcClassification       []string            `protobuf:"bytes,4,rep,name=atcClassification,proto3" json:"atcClassification,omitempty"`
	IsBiotherapeutic        string              `protobuf:"bytes,5,opt,name=isBiotherapeutic,proto3" json:"isBiotherapeutic,omitempty"`
	HelmNotation            string              `protobuf:"bytes,6,opt,name=helmNotation,proto3" json:"helmNotation,omitempty"`
	HracClassification      string              `protobuf:"bytes,7,opt,name=hracClassification,proto3" json:"hracClassification,omitempty"`
	FracClassification      string              `protobuf:"bytes,8,opt,name=fracClassification,proto3" json:"fracClassification,omitempty"`
	IracClassification      string              `protobuf:"bytes,9,opt,name=iracClassification,proto3" json:"iracClassification,omitempty"`
	Type                    string              `protobuf:"bytes,10,opt,name=type,proto3" json:"type,omitempty"`
	BioComponentType        string              `protobuf:"bytes,11,opt,name=bioComponentType,proto3" json:"bioComponentType,omitempty"`
	BioComponentDescription string              `protobuf:"bytes,12,opt,name=bioComponentDescription,proto3" json:"bioComponentDescription,omitempty"`
	BioComponentSquence     string              `protobuf:"bytes,13,opt,name=bioComponentSquence,proto3" json:"bioComponentSquence,omitempty"`
	BioComponentTaxo        string              `protobuf:"bytes,14,opt,name=bioComponentTaxo,proto3" json:"bioComponentTaxo,omitempty"`
	Indications             []*ChemblIndication `protobuf:"bytes,15,rep,name=indications,proto3" json:"indications,omitempty"`
	Parent                  string              `protobuf:"bytes,16,opt,name=parent,proto3" json:"parent,omitempty"`
	Childs                  []string            `protobuf:"bytes,17,rep,name=childs,proto3" json:"childs,omitempty"`
	Mechanism               *ChemblMechanism    `protobuf:"bytes,18,opt,name=mechanism,proto3" json:"mechanism,omitempty"`
	Inchi                   string              `protobuf:"bytes,19,opt,name=inchi,proto3" json:"inchi,omitempty"`
	Name                    string              `protobuf:"bytes,20,opt,name=name,proto3" json:"name,omitempty"`
	InchiKey                string              `protobuf:"bytes,21,opt,name=inchiKey,proto3" json:"inchiKey,omitempty"`
	Smiles                  string              `protobuf:"bytes,22,opt,name=smiles,proto3" json:"smiles,omitempty"`
	Alogp                   float64             `protobuf:"fixed64,23,opt,name=alogp,proto3" json:"alogp,omitempty"`
	WeightFreebase          float64             `protobuf:"fixed64,24,opt,name=weightFreebase,proto3" json:"weightFreebase,omitempty"`
	Hba                     float64             `protobuf:"fixed64,25,opt,name=hba,proto3" json:"hba,omitempty"`
	Hbd                     float64             `protobuf:"fixed64,26,opt,name=hbd,proto3" json:"hbd,omitempty"`
	Psa                     float64             `protobuf:"fixed64,27,opt,name=psa,proto3" json:"psa,omitempty"`
	Rtb                     float64             `protobuf:"fixed64,28,opt,name=rtb,proto3" json:"rtb,omitempty"`
	Ro3Pass                 string              `protobuf:"bytes,29,opt,name=ro3Pass,proto3" json:"ro3Pass,omitempty"`
	NumRo5Violations        float64             `protobuf:"fixed64,30,opt,name=numRo5Violations,proto3" json:"numRo5Violations,omitempty"`
	AcdMostApka             float64             `protobuf:"fixed64,31,opt,name=acdMostApka,proto3" json:"acdMostApka,omitempty"`
	AcdMostBpka             float64             `protobuf:"fixed64,32,opt,name=acdMostBpka,proto3" json:"acdMostBpka,omitempty"`
	AcdLogp                 float64             `protobuf:"fixed64,33,opt,name=acdLogp,proto3" json:"acdLogp,omitempty"`
	AcdLogd                 float64             `protobuf:"fixed64,34,opt,name=acdLogd,proto3" json:"acdLogd,omitempty"`
	MolecularSpecies        string              `protobuf:"bytes,35,opt,name=molecularSpecies,proto3" json:"molecularSpecies,omitempty"`
	Weight                  float64             `protobuf:"fixed64,36,opt,name=weight,proto3" json:"weight,omitempty"`
	AromaticRings           float64             `protobuf:"fixed64,37,opt,name=aromaticRings,proto3" json:"aromaticRings,omitempty"`
	HeavyAtoms              float64             `protobuf:"fixed64,38,opt,name=heavyAtoms,proto3" json:"heavyAtoms,omitempty"`
	Formula                 string              `protobuf:"bytes,39,opt,name=formula,proto3" json:"formula,omitempty"`
	WeightMonoisotopic      float64             `protobuf:"fixed64,40,opt,name=weightMonoisotopic,proto3" json:"weightMonoisotopic,omitempty"`
	QedWeighted             float64             `protobuf:"fixed64,41,opt,name=qedWeighted,proto3" json:"qedWeighted,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}            `json:"-"`
	XXX_unrecognized        []byte              `json:"-"`
	XXX_sizecache           int32               `json:"-"`
}

func (m *ChemblMolecule) Reset()         { *m = ChemblMolecule{} }
func (m *ChemblMolecule) String() string { return proto.CompactTextString(m) }
func (*ChemblMolecule) ProtoMessage()    {}
func (*ChemblMolecule) Descriptor() ([]byte, []int) {
	return fileDescriptor_044920aba15ba186, []int{18}
}

func (m *ChemblMolecule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChemblMolecule.Unmarshal(m, b)
}
func (m *ChemblMolecule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChemblMolecule.Marshal(b, m, deterministic)
}
func (m *ChemblMolecule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChemblMolecule.Merge(m, src)
}
func (m *ChemblMolecule) XXX_Size() int {
	return xxx_messageInfo_ChemblMolecule.Size(m)
}
func (m *ChemblMolecule) XXX_DiscardUnknown() {
	xxx_messageInfo_ChemblMolecule.DiscardUnknown(m)
}

var xxx_messageInfo_ChemblMolecule proto.InternalMessageInfo

func (m *ChemblMolecule) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *ChemblMolecule) GetHighestDevelopmentPhase() int32 {
	if m != nil {
		return m.HighestDevelopmentPhase
	}
	return 0
}

func (m *ChemblMolecule) GetAltNames() []string {
	if m != nil {
		return m.AltNames
	}
	return nil
}

func (m *ChemblMolecule) GetAtcClassification() []string {
	if m != nil {
		return m.AtcClassification
	}
	return nil
}

func (m *ChemblMolecule) GetIsBiotherapeutic() string {
	if m != nil {
		return m.IsBiotherapeutic
	}
	return ""
}

func (m *ChemblMolecule) GetHelmNotation() string {
	if m != nil {
		return m.HelmNotation
	}
	return ""
}

func (m *ChemblMolecule) GetHracClassification() string {
	if m != nil {
		return m.HracClassification
	}
	return ""
}

func (m *ChemblMolecule) GetFracClassification() string {
	if m != nil {
		return m.FracClassification
	}
	return ""
}

func (m *ChemblMolecule) GetIracClassification() string {
	if m != nil {
		return m.IracClassification
	}
	return ""
}

func (m *ChemblMolecule) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ChemblMolecule) GetBioComponentType() string {
	if m != nil {
		return m.BioComponentType
	}
	return ""
}

func (m *ChemblMolecule) GetBioComponentDescription() string {
	if m != nil {
		return m.BioComponentDescription
	}
	return ""
}

func (m *ChemblMolecule) GetBioComponentSquence() string {
	if m != nil {
		return m.BioComponentSquence
	}
	return ""
}

func (m *ChemblMolecule) GetBioComponentTaxo() string {
	if m != nil {
		return m.BioComponentTaxo
	}
	return ""
}

func (m *ChemblMolecule) GetIndications() []*ChemblIndication {
	if m != nil {
		return m.Indications
	}
	return nil
}

func (m *ChemblMolecule) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ChemblMolecule) GetChilds() []string {
	if m != nil {
		return m.Childs
	}
	return nil
}

func (m *ChemblMolecule) GetMechanism() *ChemblMechanism {
	if m != nil {
		return m.Mechanism
	}
	return nil
}

func (m *ChemblMolecule) GetInchi() string {
	if m != nil {
		return m.Inchi
	}
	return ""
}

func (m *ChemblMolecule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChemblMolecule) GetInchiKey() string {
	if m != nil {
		return m.InchiKey
	}
	return ""
}

func (m *ChemblMolecule) GetSmiles() string {
	if m != nil {
		return m.Smiles
	}
	return ""
}

func (m *ChemblMolecule) GetAlogp() float64 {
	if m != nil {
		return m.Alogp
	}
	return 0
}

func (m *ChemblMolecule) GetWeightFreebase() float64 {
	if m != nil {
		return m.WeightFreebase
	}
	return 0
}

func (m *ChemblMolecule) GetHba() float64 {
	if m != nil {
		return m.Hba
	}
	return 0
}

func (m *ChemblMolecule) GetHbd() float64 {
	if m != nil {
		return m.Hbd
	}
	return 0
}

func (m *ChemblMolecule) GetPsa() float64 {
	if m != nil {
		return m.Psa
	}
	return 0
}

func (m *ChemblMolecule) GetRtb() float64 {
	if m != nil {
		return m.Rtb
	}
	return 0
}

func (m *ChemblMolecule) GetRo3Pass() string {
	if m != nil {
		return m.Ro3Pass
	}
	return ""
}

func (m *ChemblMolecule) GetNumRo5Violations() float64 {
	if m != nil {
		return m.NumRo5Violations
	}
	return 0
}

func (m *ChemblMolecule) GetAcdMostApka() float64 {
	if m != nil {
		return m.AcdMostApka
	}
	return 0
}

func (m *ChemblMolecule) GetAcdMostBpka() float64 {
	if m != nil {
		return m.AcdMostBpka
	}
	return 0
}

func (m *ChemblMolecule) GetAcdLogp() float64 {
	if m != nil {
		return m.AcdLogp
	}
	return 0
}

func (m *ChemblMolecule) GetAcdLogd() float64 {
	if m != nil {
		return m.AcdLogd
	}
	return 0
}

func (m *ChemblMolecule) GetMolecularSpecies() string {
	if m != nil {
		return m.MolecularSpecies
	}
	return ""
}

func (m *ChemblMolecule) GetWeight() float64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *ChemblMolecule) GetAromaticRings() float64 {
	if m != nil {
		return m.AromaticRings
	}
	return 0
}

func (m *ChemblMolecule) GetHeavyAtoms() float64 {
	if m != nil {
		return m.HeavyAtoms
	}
	return 0
}

func (m *ChemblMolecule) GetFormula() string {
	if m != nil {
		return m.Formula
	}
	return ""
}

func (m *ChemblMolecule) GetWeightMonoisotopic() float64 {
	if m != nil {
		return m.WeightMonoisotopic
	}
	return 0
}

func (m *ChemblMolecule) GetQedWeighted() float64 {
	if m != nil {
		return m.QedWeighted
	}
	return 0
}

type ChemblIndication struct {
	EfoName                 string           `protobuf:"bytes,1,opt,name=efoName,proto3" json:"efoName,omitempty"`
	MeshHeading             string           `protobuf:"bytes,2,opt,name=meshHeading,proto3" json:"meshHeading,omitempty"`
	HighestDevelopmentPhase int32            `protobuf:"varint,3,opt,name=highestDevelopmentPhase,proto3" json:"highestDevelopmentPhase,omitempty"`
	Efo                     string           `protobuf:"bytes,4,opt,name=efo,proto3" json:"efo,omitempty"`
	Mesh                    string           `protobuf:"bytes,5,opt,name=mesh,proto3" json:"mesh,omitempty"`
	Mechanism               *ChemblMechanism `protobuf:"bytes,6,opt,name=mechanism,proto3" json:"mechanism,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}         `json:"-"`
	XXX_unrecognized        []byte           `json:"-"`
	XXX_sizecache           int32            `json:"-"`
}

func (m *ChemblIndication) Reset()         { *m = ChemblIndication{} }
func (m *ChemblIndication) String() string { return proto.CompactTextString(m) }
func (*ChemblIndication) ProtoMessage()    {}
func (*ChemblIndication) Descriptor() ([]byte, []int) {
	return fileDescriptor_044920aba15ba186, []int{19}
}

func (m *ChemblIndication) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChemblIndication.Unmarshal(m, b)
}
func (m *ChemblIndication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChemblIndication.Marshal(b, m, deterministic)
}
func (m *ChemblIndication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChemblIndication.Merge(m, src)
}
func (m *ChemblIndication) XXX_Size() int {
	return xxx_messageInfo_ChemblIndication.Size(m)
}
func (m *ChemblIndication) XXX_DiscardUnknown() {
	xxx_messageInfo_ChemblIndication.DiscardUnknown(m)
}

var xxx_messageInfo_ChemblIndication proto.InternalMessageInfo

func (m *ChemblIndication) GetEfoName() string {
	if m != nil {
		return m.EfoName
	}
	return ""
}

func (m *ChemblIndication) GetMeshHeading() string {
	if m != nil {
		return m.MeshHeading
	}
	return ""
}

func (m *ChemblIndication) GetHighestDevelopmentPhase() int32 {
	if m != nil {
		return m.HighestDevelopmentPhase
	}
	return 0
}

func (m *ChemblIndication) GetEfo() string {
	if m != nil {
		return m.Efo
	}
	return ""
}

func (m *ChemblIndication) GetMesh() string {
	if m != nil {
		return m.Mesh
	}
	return ""
}

func (m *ChemblIndication) GetMechanism() *ChemblMechanism {
	if m != nil {
		return m.Mechanism
	}
	return nil
}

type ChemblTarget struct {
	Title             string                               `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	IsSpeciesGroup    string                               `protobuf:"bytes,2,opt,name=isSpeciesGroup,proto3" json:"isSpeciesGroup,omitempty"`
	Type              string                               `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Subsetofs         []string                             `protobuf:"bytes,4,rep,name=subsetofs,proto3" json:"subsetofs,omitempty"`
	Equivalents       []string                             `protobuf:"bytes,5,rep,name=equivalents,proto3" json:"equivalents,omitempty"`
	Subsets           []string                             `protobuf:"bytes,6,rep,name=subsets,proto3" json:"subsets,omitempty"`
	Overlaps          []string                             `protobuf:"bytes,7,rep,name=overlaps,proto3" json:"overlaps,omitempty"`
	BindingSite       *ChemblBindingSite                   `protobuf:"bytes,8,opt,name=bindingSite,proto3" json:"bindingSite,omitempty"`
	Ptclassifications []*ChemblProteinTargetClassification `protobuf:"bytes,9,rep,name=ptclassifications,proto3" json:"ptclassifications,omitempty"`
	// target_components maps to target both via xref and here  because connection has property like single,group,complex
	Components           []*ChemblTargetComponentInfo `protobuf:"bytes,10,rep,name=components,proto3" json:"components,omitempty"`
	Mechanism            *ChemblMechanism             `protobuf:"bytes,11,opt,name=mechanism,proto3" json:"mechanism,omitempty"`
	Tax                  string                       `protobuf:"bytes,12,opt,name=tax,proto3" json:"tax,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ChemblTarget) Reset()         { *m = ChemblTarget{} }
func (m *ChemblTarget) String() string { return proto.CompactTextString(m) }
func (*ChemblTarget) ProtoMessage()    {}
func (*ChemblTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_044920aba15ba186, []int{20}
}

func (m *ChemblTarget) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChemblTarget.Unmarshal(m, b)
}
func (m *ChemblTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChemblTarget.Marshal(b, m, deterministic)
}
func (m *ChemblTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChemblTarget.Merge(m, src)
}
func (m *ChemblTarget) XXX_Size() int {
	return xxx_messageInfo_ChemblTarget.Size(m)
}
func (m *ChemblTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_ChemblTarget.DiscardUnknown(m)
}

var xxx_messageInfo_ChemblTarget proto.InternalMessageInfo

func (m *ChemblTarget) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ChemblTarget) GetIsSpeciesGroup() string {
	if m != nil {
		return m.IsSpeciesGroup
	}
	return ""
}

func (m *ChemblTarget) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ChemblTarget) GetSubsetofs() []string {
	if m != nil {
		return m.Subsetofs
	}
	return nil
}

func (m *ChemblTarget) GetEquivalents() []string {
	if m != nil {
		return m.Equivalents
	}
	return nil
}

func (m *ChemblTarget) GetSubsets() []string {
	if m != nil {
		return m.Subsets
	}
	return nil
}

func (m *ChemblTarget) GetOverlaps() []string {
	if m != nil {
		return m.Overlaps
	}
	return nil
}

func (m *ChemblTarget) GetBindingSite() *ChemblBindingSite {
	if m != nil {
		return m.BindingSite
	}
	return nil
}

func (m *ChemblTarget) GetPtclassifications() []*ChemblProteinTargetClassification {
	if m != nil {
		return m.Ptclassifications
	}
	return nil
}

func (m *ChemblTarget) GetComponents() []*ChemblTargetComponentInfo {
	if m != nil {
		return m.Components
	}
	return nil
}

func (m *ChemblTarget) GetMechanism() *ChemblMechanism {
	if m != nil {
		return m.Mechanism
	}
	return nil
}

func (m *ChemblTarget) GetTax() string {
	if m != nil {
		return m.Tax
	}
	return ""
}

type ChemblProteinTargetClassification struct {
	ClassName            string   `protobuf:"bytes,1,opt,name=className,proto3" json:"className,omitempty"`
	ClassLevel           string   `protobuf:"bytes,2,opt,name=classLevel,proto3" json:"classLevel,omitempty"`
	ClassPath            string   `protobuf:"bytes,3,opt,name=classPath,proto3" json:"classPath,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChemblProteinTargetClassification) Reset()         { *m = ChemblProteinTargetClassification{} }
func (m *ChemblProteinTargetClassification) String() string { return proto.CompactTextString(m) }
func (*ChemblProteinTargetClassification) ProtoMessage()    {}
func (*ChemblProteinTargetClassification) Descriptor() ([]byte, []int) {
	return fileDescriptor_044920aba15ba186, []int{21}
}

func (m *ChemblProteinTargetClassification) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChemblProteinTargetClassification.Unmarshal(m, b)
}
func (m *ChemblProteinTargetClassification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChemblProteinTargetClassification.Marshal(b, m, deterministic)
}
func (m *ChemblProteinTargetClassification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChemblProteinTargetClassification.Merge(m, src)
}
func (m *ChemblProteinTargetClassification) XXX_Size() int {
	return xxx_messageInfo_ChemblProteinTargetClassification.Size(m)
}
func (m *ChemblProteinTargetClassification) XXX_DiscardUnknown() {
	xxx_messageInfo_ChemblProteinTargetClassification.DiscardUnknown(m)
}

var xxx_messageInfo_ChemblProteinTargetClassification proto.InternalMessageInfo

func (m *ChemblProteinTargetClassification) GetClassName() string {
	if m != nil {
		return m.ClassName
	}
	return ""
}

func (m *ChemblProteinTargetClassification) GetClassLevel() string {
	if m != nil {
		return m.ClassLevel
	}
	return ""
}

func (m *ChemblProteinTargetClassification) GetClassPath() string {
	if m != nil {
		return m.ClassPath
	}
	return ""
}

type ChemblCellLine struct {
	Desc                 string   `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
	CellosaurusId        string   `protobuf:"bytes,2,opt,name=cellosaurusId,proto3" json:"cellosaurusId,omitempty"`
	Efo                  string   `protobuf:"bytes,3,opt,name=efo,proto3" json:"efo,omitempty"`
	Clo                  string   `protobuf:"bytes,4,opt,name=clo,proto3" json:"clo,omitempty"`
	Tax                  string   `protobuf:"bytes,5,opt,name=tax,proto3" json:"tax,omitempty"`
	Cellxref             []string `protobuf:"bytes,6,rep,name=cellxref,proto3" json:"cellxref,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChemblCellLine) Reset()         { *m = ChemblCellLine{} }
func (m *ChemblCellLine) String() string { return proto.CompactTextString(m) }
func (*ChemblCellLine) ProtoMessage()    {}
func (*ChemblCellLine) Descriptor() ([]byte, []int) {
	return fileDescriptor_044920aba15ba186, []int{22}
}

func (m *ChemblCellLine) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChemblCellLine.Unmarshal(m, b)
}
func (m *ChemblCellLine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChemblCellLine.Marshal(b, m, deterministic)
}
func (m *ChemblCellLine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChemblCellLine.Merge(m, src)
}
func (m *ChemblCellLine) XXX_Size() int {
	return xxx_messageInfo_ChemblCellLine.Size(m)
}
func (m *ChemblCellLine) XXX_DiscardUnknown() {
	xxx_messageInfo_ChemblCellLine.DiscardUnknown(m)
}

var xxx_messageInfo_ChemblCellLine proto.InternalMessageInfo

func (m *ChemblCellLine) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *ChemblCellLine) GetCellosaurusId() string {
	if m != nil {
		return m.CellosaurusId
	}
	return ""
}

func (m *ChemblCellLine) GetEfo() string {
	if m != nil {
		return m.Efo
	}
	return ""
}

func (m *ChemblCellLine) GetClo() string {
	if m != nil {
		return m.Clo
	}
	return ""
}

func (m *ChemblCellLine) GetTax() string {
	if m != nil {
		return m.Tax
	}
	return ""
}

func (m *ChemblCellLine) GetCellxref() []string {
	if m != nil {
		return m.Cellxref
	}
	return nil
}

type ChemblTargetComponentInfo struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Acc                  string   `protobuf:"bytes,2,opt,name=acc,proto3" json:"acc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChemblTargetComponentInfo) Reset()         { *m = ChemblTargetComponentInfo{} }
func (m *ChemblTargetComponentInfo) String() string { return proto.CompactTextString(m) }
func (*ChemblTargetComponentInfo) ProtoMessage()    {}
func (*ChemblTargetComponentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_044920aba15ba186, []int{23}
}

func (m *ChemblTargetComponentInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChemblTargetComponentInfo.Unmarshal(m, b)
}
func (m *ChemblTargetComponentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChemblTargetComponentInfo.Marshal(b, m, deterministic)
}
func (m *ChemblTargetComponentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChemblTargetComponentInfo.Merge(m, src)
}
func (m *ChemblTargetComponentInfo) XXX_Size() int {
	return xxx_messageInfo_ChemblTargetComponentInfo.Size(m)
}
func (m *ChemblTargetComponentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChemblTargetComponentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChemblTargetComponentInfo proto.InternalMessageInfo

func (m *ChemblTargetComponentInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ChemblTargetComponentInfo) GetAcc() string {
	if m != nil {
		return m.Acc
	}
	return ""
}

type ChemblTargetComponent struct {
	Desc                 string                               `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
	AltLabel             string                               `protobuf:"bytes,2,opt,name=altLabel,proto3" json:"altLabel,omitempty"`
	Type                 string                               `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Ptclassifications    []*ChemblProteinTargetClassification `protobuf:"bytes,4,rep,name=ptclassifications,proto3" json:"ptclassifications,omitempty"`
	Acc                  string                               `protobuf:"bytes,5,opt,name=acc,proto3" json:"acc,omitempty"`
	Tax                  string                               `protobuf:"bytes,6,opt,name=tax,proto3" json:"tax,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *ChemblTargetComponent) Reset()         { *m = ChemblTargetComponent{} }
func (m *ChemblTargetComponent) String() string { return proto.CompactTextString(m) }
func (*ChemblTargetComponent) ProtoMessage()    {}
func (*ChemblTargetComponent) Descriptor() ([]byte, []int) {
	return fileDescriptor_044920aba15ba186, []int{24}
}

func (m *ChemblTargetComponent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChemblTargetComponent.Unmarshal(m, b)
}
func (m *ChemblTargetComponent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChemblTargetComponent.Marshal(b, m, deterministic)
}
func (m *ChemblTargetComponent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChemblTargetComponent.Merge(m, src)
}
func (m *ChemblTargetComponent) XXX_Size() int {
	return xxx_messageInfo_ChemblTargetComponent.Size(m)
}
func (m *ChemblTargetComponent) XXX_DiscardUnknown() {
	xxx_messageInfo_ChemblTargetComponent.DiscardUnknown(m)
}

var xxx_messageInfo_ChemblTargetComponent proto.InternalMessageInfo

func (m *ChemblTargetComponent) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *ChemblTargetComponent) GetAltLabel() string {
	if m != nil {
		return m.AltLabel
	}
	return ""
}

func (m *ChemblTargetComponent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ChemblTargetComponent) GetPtclassifications() []*ChemblProteinTargetClassification {
	if m != nil {
		return m.Ptclassifications
	}
	return nil
}

func (m *ChemblTargetComponent) GetAcc() string {
	if m != nil {
		return m.Acc
	}
	return ""
}

func (m *ChemblTargetComponent) GetTax() string {
	if m != nil {
		return m.Tax
	}
	return ""
}

type ChemblAssay struct {
	Desc                 string   `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	TargetConfDesc       string   `protobuf:"bytes,3,opt,name=targetConfDesc,proto3" json:"targetConfDesc,omitempty"`
	TargetRelType        string   `protobuf:"bytes,4,opt,name=targetRelType,proto3" json:"targetRelType,omitempty"`
	TargetRelDesc        string   `protobuf:"bytes,5,opt,name=targetRelDesc,proto3" json:"targetRelDesc,omitempty"`
	TargetConfScore      int32    `protobuf:"varint,6,opt,name=targetConfScore,proto3" json:"targetConfScore,omitempty"`
	SubCellFrac          string   `protobuf:"bytes,7,opt,name=subCellFrac,proto3" json:"subCellFrac,omitempty"`
	TestType             string   `protobuf:"bytes,8,opt,name=testType,proto3" json:"testType,omitempty"`
	Strain               string   `protobuf:"bytes,9,opt,name=strain,proto3" json:"strain,omitempty"`
	CellType             string   `protobuf:"bytes,10,opt,name=cellType,proto3" json:"cellType,omitempty"`
	Tissue               string   `protobuf:"bytes,11,opt,name=tissue,proto3" json:"tissue,omitempty"`
	Tax                  string   `protobuf:"bytes,12,opt,name=tax,proto3" json:"tax,omitempty"`
	Category             string   `protobuf:"bytes,13,opt,name=category,proto3" json:"category,omitempty"`
	Source               string   `protobuf:"bytes,14,opt,name=source,proto3" json:"source,omitempty"`
	SourceDesc           string   `protobuf:"bytes,15,opt,name=sourceDesc,proto3" json:"sourceDesc,omitempty"`
	Bao                  string   `protobuf:"bytes,16,opt,name=bao,proto3" json:"bao,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChemblAssay) Reset()         { *m = ChemblAssay{} }
func (m *ChemblAssay) String() string { return proto.CompactTextString(m) }
func (*ChemblAssay) ProtoMessage()    {}
func (*ChemblAssay) Descriptor() ([]byte, []int) {
	return fileDescriptor_044920aba15ba186, []int{25}
}

func (m *ChemblAssay) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChemblAssay.Unmarshal(m, b)
}
func (m *ChemblAssay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChemblAssay.Marshal(b, m, deterministic)
}
func (m *ChemblAssay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChemblAssay.Merge(m, src)
}
func (m *ChemblAssay) XXX_Size() int {
	return xxx_messageInfo_ChemblAssay.Size(m)
}
func (m *ChemblAssay) XXX_DiscardUnknown() {
	xxx_messageInfo_ChemblAssay.DiscardUnknown(m)
}

var xxx_messageInfo_ChemblAssay proto.InternalMessageInfo

func (m *ChemblAssay) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *ChemblAssay) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ChemblAssay) GetTargetConfDesc() string {
	if m != nil {
		return m.TargetConfDesc
	}
	return ""
}

func (m *ChemblAssay) GetTargetRelType() string {
	if m != nil {
		return m.TargetRelType
	}
	return ""
}

func (m *ChemblAssay) GetTargetRelDesc() string {
	if m != nil {
		return m.TargetRelDesc
	}
	return ""
}

func (m *ChemblAssay) GetTargetConfScore() int32 {
	if m != nil {
		return m.TargetConfScore
	}
	return 0
}

func (m *ChemblAssay) GetSubCellFrac() string {
	if m != nil {
		return m.SubCellFrac
	}
	return ""
}

func (m *ChemblAssay) GetTestType() string {
	if m != nil {
		return m.TestType
	}
	return ""
}

func (m *ChemblAssay) GetStrain() string {
	if m != nil {
		return m.Strain
	}
	return ""
}

func (m *ChemblAssay) GetCellType() string {
	if m != nil {
		return m.CellType
	}
	return ""
}

func (m *ChemblAssay) GetTissue() string {
	if m != nil {
		return m.Tissue
	}
	return ""
}

func (m *ChemblAssay) GetTax() string {
	if m != nil {
		return m.Tax
	}
	return ""
}

func (m *ChemblAssay) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *ChemblAssay) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *ChemblAssay) GetSourceDesc() string {
	if m != nil {
		return m.SourceDesc
	}
	return ""
}

func (m *ChemblAssay) GetBao() string {
	if m != nil {
		return m.Bao
	}
	return ""
}

type ChemblBindingSite struct {
	Name                 string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Mechanism            *ChemblMechanism `protobuf:"bytes,2,opt,name=mechanism,proto3" json:"mechanism,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ChemblBindingSite) Reset()         { *m = ChemblBindingSite{} }
func (m *ChemblBindingSite) String() string { return proto.CompactTextString(m) }
func (*ChemblBindingSite) ProtoMessage()    {}
func (*ChemblBindingSite) Descriptor() ([]byte, []int) {
	return fileDescriptor_044920aba15ba186, []int{26}
}

func (m *ChemblBindingSite) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChemblBindingSite.Unmarshal(m, b)
}
func (m *ChemblBindingSite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChemblBindingSite.Marshal(b, m, deterministic)
}
func (m *ChemblBindingSite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChemblBindingSite.Merge(m, src)
}
func (m *ChemblBindingSite) XXX_Size() int {
	return xxx_messageInfo_ChemblBindingSite.Size(m)
}
func (m *ChemblBindingSite) XXX_DiscardUnknown() {
	xxx_messageInfo_ChemblBindingSite.DiscardUnknown(m)
}

var xxx_messageInfo_ChemblBindingSite proto.InternalMessageInfo

func (m *ChemblBindingSite) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChemblBindingSite) GetMechanism() *ChemblMechanism {
	if m != nil {
		return m.Mechanism
	}
	return nil
}

type ChemblMechanism struct {
	Desc                 string   `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
	Action               string   `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChemblMechanism) Reset()         { *m = ChemblMechanism{} }
func (m *ChemblMechanism) String() string { return proto.CompactTextString(m) }
func (*ChemblMechanism) ProtoMessage()    {}
func (*ChemblMechanism) Descriptor() ([]byte, []int) {
	return fileDescriptor_044920aba15ba186, []int{27}
}

func (m *ChemblMechanism) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChemblMechanism.Unmarshal(m, b)
}
func (m *ChemblMechanism) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChemblMechanism.Marshal(b, m, deterministic)
}
func (m *ChemblMechanism) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChemblMechanism.Merge(m, src)
}
func (m *ChemblMechanism) XXX_Size() int {
	return xxx_messageInfo_ChemblMechanism.Size(m)
}
func (m *ChemblMechanism) XXX_DiscardUnknown() {
	xxx_messageInfo_ChemblMechanism.DiscardUnknown(m)
}

var xxx_messageInfo_ChemblMechanism proto.InternalMessageInfo

func (m *ChemblMechanism) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *ChemblMechanism) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

type HmdbAttr struct {
	Name              string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Desc              string   `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Accessions        []string `protobuf:"bytes,3,rep,name=accessions,proto3" json:"accessions,omitempty"`
	Synonyms          []string `protobuf:"bytes,4,rep,name=synonyms,proto3" json:"synonyms,omitempty"`
	Diseases          []string `protobuf:"bytes,5,rep,name=diseases,proto3" json:"diseases,omitempty"`
	Formula           string   `protobuf:"bytes,6,opt,name=formula,proto3" json:"formula,omitempty"`
	AverageWeight     float64  `protobuf:"fixed64,7,opt,name=averageWeight,proto3" json:"averageWeight,omitempty"`
	MonisotopicWeight float64  `protobuf:"fixed64,8,opt,name=monisotopicWeight,proto3" json:"monisotopicWeight,omitempty"`
	IupacName         string   `protobuf:"bytes,9,opt,name=iupacName,proto3" json:"iupacName,omitempty"`
	Smiles            string   `protobuf:"bytes,10,opt,name=smiles,proto3" json:"smiles,omitempty"`
	Inchi             string   `protobuf:"bytes,11,opt,name=inchi,proto3" json:"inchi,omitempty"`
	InchiKey          string   `protobuf:"bytes,12,opt,name=inchiKey,proto3" json:"inchiKey,omitempty"`
	//HmdbTaxonomy taxonomy = 13;
	Props                *HmdbPredictedProps    `protobuf:"bytes,14,opt,name=props,proto3" json:"props,omitempty"`
	ExperimentalProps    *HmdbExperimentalProps `protobuf:"bytes,15,opt,name=experimentalProps,proto3" json:"experimentalProps,omitempty"`
	CellularLocations    []string               `protobuf:"bytes,16,rep,name=cellularLocations,proto3" json:"cellularLocations,omitempty"`
	Biospecimens         []string               `protobuf:"bytes,17,rep,name=biospecimens,proto3" json:"biospecimens,omitempty"`
	TissueLocations      []string               `protobuf:"bytes,18,rep,name=tissueLocations,proto3" json:"tissueLocations,omitempty"`
	Pathways             []string               `protobuf:"bytes,19,rep,name=pathways,proto3" json:"pathways,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *HmdbAttr) Reset()         { *m = HmdbAttr{} }
func (m *HmdbAttr) String() string { return proto.CompactTextString(m) }
func (*HmdbAttr) ProtoMessage()    {}
func (*HmdbAttr) Descriptor() ([]byte, []int) {
	return fileDescriptor_044920aba15ba186, []int{28}
}

func (m *HmdbAttr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HmdbAttr.Unmarshal(m, b)
}
func (m *HmdbAttr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HmdbAttr.Marshal(b, m, deterministic)
}
func (m *HmdbAttr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HmdbAttr.Merge(m, src)
}
func (m *HmdbAttr) XXX_Size() int {
	return xxx_messageInfo_HmdbAttr.Size(m)
}
func (m *HmdbAttr) XXX_DiscardUnknown() {
	xxx_messageInfo_HmdbAttr.DiscardUnknown(m)
}

var xxx_messageInfo_HmdbAttr proto.InternalMessageInfo

func (m *HmdbAttr) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HmdbAttr) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *HmdbAttr) GetAccessions() []string {
	if m != nil {
		return m.Accessions
	}
	return nil
}

func (m *HmdbAttr) GetSynonyms() []string {
	if m != nil {
		return m.Synonyms
	}
	return nil
}

func (m *HmdbAttr) GetDiseases() []string {
	if m != nil {
		return m.Diseases
	}
	return nil
}

func (m *HmdbAttr) GetFormula() string {
	if m != nil {
		return m.Formula
	}
	return ""
}

func (m *HmdbAttr) GetAverageWeight() float64 {
	if m != nil {
		return m.AverageWeight
	}
	return 0
}

func (m *HmdbAttr) GetMonisotopicWeight() float64 {
	if m != nil {
		return m.MonisotopicWeight
	}
	return 0
}

func (m *HmdbAttr) GetIupacName() string {
	if m != nil {
		return m.IupacName
	}
	return ""
}

func (m *HmdbAttr) GetSmiles() string {
	if m != nil {
		return m.Smiles
	}
	return ""
}

func (m *HmdbAttr) GetInchi() string {
	if m != nil {
		return m.Inchi
	}
	return ""
}

func (m *HmdbAttr) GetInchiKey() string {
	if m != nil {
		return m.InchiKey
	}
	return ""
}

func (m *HmdbAttr) GetProps() *HmdbPredictedProps {
	if m != nil {
		return m.Props
	}
	return nil
}

func (m *HmdbAttr) GetExperimentalProps() *HmdbExperimentalProps {
	if m != nil {
		return m.ExperimentalProps
	}
	return nil
}

func (m *HmdbAttr) GetCellularLocations() []string {
	if m != nil {
		return m.CellularLocations
	}
	return nil
}

func (m *HmdbAttr) GetBiospecimens() []string {
	if m != nil {
		return m.Biospecimens
	}
	return nil
}

func (m *HmdbAttr) GetTissueLocations() []string {
	if m != nil {
		return m.TissueLocations
	}
	return nil
}

func (m *HmdbAttr) GetPathways() []string {
	if m != nil {
		return m.Pathways
	}
	return nil
}

type HmdbPredictedProps struct {
	RotatableBondCount   int32    `protobuf:"varint,1,opt,name=rotatableBondCount,proto3" json:"rotatableBondCount,omitempty"`
	PhysiologicalCharge  int32    `protobuf:"varint,2,opt,name=physiologicalCharge,proto3" json:"physiologicalCharge,omitempty"`
	RuleOfFive           string   `protobuf:"bytes,3,opt,name=ruleOfFive,proto3" json:"ruleOfFive,omitempty"`
	PkaStrongestAcidic   float64  `protobuf:"fixed64,4,opt,name=pkaStrongestAcidic,proto3" json:"pkaStrongestAcidic,omitempty"`
	MonoMass             float64  `protobuf:"fixed64,5,opt,name=monoMass,proto3" json:"monoMass,omitempty"`
	GhoseFilter          string   `protobuf:"bytes,6,opt,name=ghose_filter,json=ghoseFilter,proto3" json:"ghose_filter,omitempty"`
	Refractivity         float64  `protobuf:"fixed64,7,opt,name=refractivity,proto3" json:"refractivity,omitempty"`
	FormalCharge         float64  `protobuf:"fixed64,8,opt,name=formalCharge,proto3" json:"formalCharge,omitempty"`
	Bioavailability      float64  `protobuf:"fixed64,9,opt,name=bioavailability,proto3" json:"bioavailability,omitempty"`
	Solubility           string   `protobuf:"bytes,10,opt,name=solubility,proto3" json:"solubility,omitempty"`
	PkaStrongestBasic    float64  `protobuf:"fixed64,11,opt,name=pka_strongest_basic,json=pkaStrongestBasic,proto3" json:"pka_strongest_basic,omitempty"`
	PolarSurfaceArea     float64  `protobuf:"fixed64,12,opt,name=polarSurfaceArea,proto3" json:"polarSurfaceArea,omitempty"`
	VeberRule            string   `protobuf:"bytes,13,opt,name=veberRule,proto3" json:"veberRule,omitempty"`
	MddrLikeRule         string   `protobuf:"bytes,14,opt,name=mddrLikeRule,proto3" json:"mddrLikeRule,omitempty"`
	Logp                 float64  `protobuf:"fixed64,15,opt,name=logp,proto3" json:"logp,omitempty"`
	Polarizability       float64  `protobuf:"fixed64,16,opt,name=polarizability,proto3" json:"polarizability,omitempty"`
	DonorCount           int32    `protobuf:"varint,17,opt,name=donorCount,proto3" json:"donorCount,omitempty"`
	AverageMass          float64  `protobuf:"fixed64,18,opt,name=averageMass,proto3" json:"averageMass,omitempty"`
	AcceptorCount        int32    `protobuf:"varint,19,opt,name=acceptorCount,proto3" json:"acceptorCount,omitempty"`
	NumberOfRings        int32    `protobuf:"varint,20,opt,name=numberOfRings,proto3" json:"numberOfRings,omitempty"`
	Logs                 float64  `protobuf:"fixed64,21,opt,name=logs,proto3" json:"logs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HmdbPredictedProps) Reset()         { *m = HmdbPredictedProps{} }
func (m *HmdbPredictedProps) String() string { return proto.CompactTextString(m) }
func (*HmdbPredictedProps) ProtoMessage()    {}
func (*HmdbPredictedProps) Descriptor() ([]byte, []int) {
	return fileDescriptor_044920aba15ba186, []int{29}
}

func (m *HmdbPredictedProps) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HmdbPredictedProps.Unmarshal(m, b)
}
func (m *HmdbPredictedProps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HmdbPredictedProps.Marshal(b, m, deterministic)
}
func (m *HmdbPredictedProps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HmdbPredictedProps.Merge(m, src)
}
func (m *HmdbPredictedProps) XXX_Size() int {
	return xxx_messageInfo_HmdbPredictedProps.Size(m)
}
func (m *HmdbPredictedProps) XXX_DiscardUnknown() {
	xxx_messageInfo_HmdbPredictedProps.DiscardUnknown(m)
}

var xxx_messageInfo_HmdbPredictedProps proto.InternalMessageInfo

func (m *HmdbPredictedProps) GetRotatableBondCount() int32 {
	if m != nil {
		return m.RotatableBondCount
	}
	return 0
}

func (m *HmdbPredictedProps) GetPhysiologicalCharge() int32 {
	if m != nil {
		return m.PhysiologicalCharge
	}
	return 0
}

func (m *HmdbPredictedProps) GetRuleOfFive() string {
	if m != nil {
		return m.RuleOfFive
	}
	return ""
}

func (m *HmdbPredictedProps) GetPkaStrongestAcidic() float64 {
	if m != nil {
		return m.PkaStrongestAcidic
	}
	return 0
}

func (m *HmdbPredictedProps) GetMonoMass() float64 {
	if m != nil {
		return m.MonoMass
	}
	return 0
}

func (m *HmdbPredictedProps) GetGhoseFilter() string {
	if m != nil {
		return m.GhoseFilter
	}
	return ""
}

func (m *HmdbPredictedProps) GetRefractivity() float64 {
	if m != nil {
		return m.Refractivity
	}
	return 0
}

func (m *HmdbPredictedProps) GetFormalCharge() float64 {
	if m != nil {
		return m.FormalCharge
	}
	return 0
}

func (m *HmdbPredictedProps) GetBioavailability() float64 {
	if m != nil {
		return m.Bioavailability
	}
	return 0
}

func (m *HmdbPredictedProps) GetSolubility() string {
	if m != nil {
		return m.Solubility
	}
	return ""
}

func (m *HmdbPredictedProps) GetPkaStrongestBasic() float64 {
	if m != nil {
		return m.PkaStrongestBasic
	}
	return 0
}

func (m *HmdbPredictedProps) GetPolarSurfaceArea() float64 {
	if m != nil {
		return m.PolarSurfaceArea
	}
	return 0
}

func (m *HmdbPredictedProps) GetVeberRule() string {
	if m != nil {
		return m.VeberRule
	}
	return ""
}

func (m *HmdbPredictedProps) GetMddrLikeRule() string {
	if m != nil {
		return m.MddrLikeRule
	}
	return ""
}

func (m *HmdbPredictedProps) GetLogp() float64 {
	if m != nil {
		return m.Logp
	}
	return 0
}

func (m *HmdbPredictedProps) GetPolarizability() float64 {
	if m != nil {
		return m.Polarizability
	}
	return 0
}

func (m *HmdbPredictedProps) GetDonorCount() int32 {
	if m != nil {
		return m.DonorCount
	}
	return 0
}

func (m *HmdbPredictedProps) GetAverageMass() float64 {
	if m != nil {
		return m.AverageMass
	}
	return 0
}

func (m *HmdbPredictedProps) GetAcceptorCount() int32 {
	if m != nil {
		return m.AcceptorCount
	}
	return 0
}

func (m *HmdbPredictedProps) GetNumberOfRings() int32 {
	if m != nil {
		return m.NumberOfRings
	}
	return 0
}

func (m *HmdbPredictedProps) GetLogs() float64 {
	if m != nil {
		return m.Logs
	}
	return 0
}

type HmdbExperimentalProps struct {
	BoolingPoint         string   `protobuf:"bytes,1,opt,name=boolingPoint,proto3" json:"boolingPoint,omitempty"`
	MeltingPoint         string   `protobuf:"bytes,2,opt,name=meltingPoint,proto3" json:"meltingPoint,omitempty"`
	Logp                 float64  `protobuf:"fixed64,3,opt,name=logp,proto3" json:"logp,omitempty"`
	WaterSolubility      string   `protobuf:"bytes,4,opt,name=waterSolubility,proto3" json:"waterSolubility,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HmdbExperimentalProps) Reset()         { *m = HmdbExperimentalProps{} }
func (m *HmdbExperimentalProps) String() string { return proto.CompactTextString(m) }
func (*HmdbExperimentalProps) ProtoMessage()    {}
func (*HmdbExperimentalProps) Descriptor() ([]byte, []int) {
	return fileDescriptor_044920aba15ba186, []int{30}
}

func (m *HmdbExperimentalProps) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HmdbExperimentalProps.Unmarshal(m, b)
}
func (m *HmdbExperimentalProps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HmdbExperimentalProps.Marshal(b, m, deterministic)
}
func (m *HmdbExperimentalProps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HmdbExperimentalProps.Merge(m, src)
}
func (m *HmdbExperimentalProps) XXX_Size() int {
	return xxx_messageInfo_HmdbExperimentalProps.Size(m)
}
func (m *HmdbExperimentalProps) XXX_DiscardUnknown() {
	xxx_messageInfo_HmdbExperimentalProps.DiscardUnknown(m)
}

var xxx_messageInfo_HmdbExperimentalProps proto.InternalMessageInfo

func (m *HmdbExperimentalProps) GetBoolingPoint() string {
	if m != nil {
		return m.BoolingPoint
	}
	return ""
}

func (m *HmdbExperimentalProps) GetMeltingPoint() string {
	if m != nil {
		return m.MeltingPoint
	}
	return ""
}

func (m *HmdbExperimentalProps) GetLogp() float64 {
	if m != nil {
		return m.Logp
	}
	return 0
}

func (m *HmdbExperimentalProps) GetWaterSolubility() string {
	if m != nil {
		return m.WaterSolubility
	}
	return ""
}

func init() {
	proto.RegisterEnum("pbuf.Ensemblbranch", Ensemblbranch_name, Ensemblbranch_value)
	proto.RegisterType((*OntologyAttr)(nil), "pbuf.OntologyAttr")
	proto.RegisterType((*HgncAttr)(nil), "pbuf.HgncAttr")
	proto.RegisterType((*InterproAttr)(nil), "pbuf.InterproAttr")
	proto.RegisterType((*EnsemblAttr)(nil), "pbuf.EnsemblAttr")
	proto.RegisterType((*TaxoAttr)(nil), "pbuf.TaxoAttr")
	proto.RegisterType((*EnaAttr)(nil), "pbuf.EnaAttr")
	proto.RegisterType((*PdbAttr)(nil), "pbuf.PdbAttr")
	proto.RegisterType((*DrugbankAttr)(nil), "pbuf.DrugbankAttr")
	proto.RegisterType((*OrphanetAttr)(nil), "pbuf.OrphanetAttr")
	proto.RegisterType((*ReactomeAttr)(nil), "pbuf.ReactomeAttr")
	proto.RegisterType((*UniprotAttr)(nil), "pbuf.UniprotAttr")
	proto.RegisterType((*UniSequence)(nil), "pbuf.UniSequence")
	proto.RegisterType((*UniprotFeatureAttr)(nil), "pbuf.UniprotFeatureAttr")
	proto.RegisterType((*UniprotFeatureEvidence)(nil), "pbuf.UniprotFeatureEvidence")
	proto.RegisterType((*UniLocation)(nil), "pbuf.UniLocation")
	proto.RegisterType((*ChemblAttr)(nil), "pbuf.ChemblAttr")
	proto.RegisterType((*ChemblDocument)(nil), "pbuf.ChemblDocument")
	proto.RegisterType((*ChemblActivity)(nil), "pbuf.ChemblActivity")
	proto.RegisterType((*ChemblMolecule)(nil), "pbuf.ChemblMolecule")
	proto.RegisterType((*ChemblIndication)(nil), "pbuf.ChemblIndication")
	proto.RegisterType((*ChemblTarget)(nil), "pbuf.ChemblTarget")
	proto.RegisterType((*ChemblProteinTargetClassification)(nil), "pbuf.ChemblProteinTargetClassification")
	proto.RegisterType((*ChemblCellLine)(nil), "pbuf.ChemblCellLine")
	proto.RegisterType((*ChemblTargetComponentInfo)(nil), "pbuf.ChemblTargetComponentInfo")
	proto.RegisterType((*ChemblTargetComponent)(nil), "pbuf.ChemblTargetComponent")
	proto.RegisterType((*ChemblAssay)(nil), "pbuf.ChemblAssay")
	proto.RegisterType((*ChemblBindingSite)(nil), "pbuf.ChemblBindingSite")
	proto.RegisterType((*ChemblMechanism)(nil), "pbuf.ChemblMechanism")
	proto.RegisterType((*HmdbAttr)(nil), "pbuf.HmdbAttr")
	proto.RegisterType((*HmdbPredictedProps)(nil), "pbuf.HmdbPredictedProps")
	proto.RegisterType((*HmdbExperimentalProps)(nil), "pbuf.HmdbExperimentalProps")
}

func init() { proto.RegisterFile("attr.proto", fileDescriptor_044920aba15ba186) }

var fileDescriptor_044920aba15ba186 = []byte{
	// 2932 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x59, 0x5b, 0x6f, 0x1c, 0x49,
	0x15, 0x66, 0x3c, 0x1e, 0x5f, 0x6a, 0x1c, 0x7b, 0xdc, 0xb9, 0x6c, 0xef, 0x6e, 0xae, 0xbd, 0x4b,
	0x12, 0xb2, 0x6c, 0xb4, 0x72, 0xb4, 0xd2, 0x82, 0x84, 0x90, 0xe3, 0x38, 0xbb, 0x16, 0x8e, 0x6d,
	0xb5, 0x9d, 0x45, 0x20, 0x24, 0xab, 0xba, 0xbb, 0x66, 0xa6, 0x48, 0x77, 0x55, 0xa7, 0xaa, 0x7a,
	0x12, 0x23, 0x24, 0x10, 0x8f, 0xbc, 0xf2, 0xc0, 0x0b, 0xfc, 0x02, 0x7e, 0x0f, 0xfc, 0x01, 0x24,
	0x1e, 0x11, 0x12, 0x6f, 0xbc, 0x80, 0xce, 0xa9, 0xaa, 0x9e, 0xee, 0x99, 0x71, 0x76, 0x25, 0xde,
	0xfa, 0x7c, 0xe7, 0xd4, 0xed, 0xdc, 0xea, 0x9c, 0x6a, 0x42, 0xa8, 0x31, 0xea, 0x71, 0xa9, 0xa4,
	0x91, 0xc1, 0x72, 0x99, 0x54, 0xc3, 0x28, 0x26, 0x1b, 0xc7, 0xc2, 0xc8, 0x5c, 0x8e, 0x2e, 0x76,
	0x8d, 0x51, 0x41, 0x40, 0x96, 0xcd, 0x45, 0xc9, 0xc2, 0xce, 0xdd, 0xce, 0xc3, 0xf5, 0x18, 0xbf,
	0x01, 0x13, 0xb4, 0x60, 0xe1, 0x92, 0xc5, 0xe0, 0x3b, 0xf8, 0x80, 0xac, 0xe9, 0x0b, 0x21, 0xc5,
	0x45, 0xa1, 0xc3, 0xee, 0xdd, 0xee, 0xc3, 0xf5, 0xb8, 0xa6, 0xa3, 0xbf, 0x2c, 0x91, 0xb5, 0xaf,
	0x46, 0x22, 0xc5, 0x09, 0xaf, 0x91, 0x1e, 0x0c, 0xd0, 0x61, 0x07, 0xa5, 0x2c, 0x11, 0x84, 0x64,
	0x55, 0x5f, 0x14, 0x89, 0xcc, 0x75, 0xb8, 0x84, 0xb8, 0x27, 0x83, 0x3b, 0xa4, 0x9f, 0xcb, 0xb4,
	0xd2, 0xe7, 0x23, 0x25, 0xab, 0x32, 0xec, 0xe2, 0x9a, 0x04, 0xa1, 0x2f, 0x01, 0x81, 0x95, 0x73,
	0x99, 0x52, 0xc3, 0xa5, 0x08, 0x97, 0x91, 0x5b, 0xd3, 0x30, 0x2d, 0xcd, 0x39, 0xd5, 0x4c, 0x87,
	0x3d, 0x3b, 0xad, 0x23, 0x83, 0x5b, 0xc4, 0xce, 0x71, 0x8e, 0xa7, 0x5b, 0xc1, 0x71, 0xeb, 0x88,
	0x9c, 0xc1, 0x11, 0x6f, 0x11, 0x52, 0x2a, 0x36, 0x39, 0xb7, 0x5b, 0x5d, 0xc5, 0xb1, 0xeb, 0x80,
	0x1c, 0xe1, 0x76, 0xef, 0x91, 0x0d, 0x64, 0xfb, 0x3d, 0xaf, 0xa1, 0x40, 0x1f, 0xb0, 0x53, 0xb7,
	0xef, 0x1b, 0x64, 0x45, 0x1b, 0x6a, 0x2a, 0x1d, 0xae, 0xe3, 0xe4, 0x8e, 0x82, 0xf3, 0x8c, 0x98,
	0x60, 0xf6, 0x38, 0x3a, 0x24, 0x38, 0x92, 0x00, 0x84, 0xc7, 0xd1, 0xd1, 0xaf, 0xc9, 0xc6, 0x81,
	0x30, 0x4c, 0x95, 0x4a, 0xbe, 0x43, 0x61, 0xb7, 0x08, 0xd1, 0x63, 0xa9, 0xcc, 0x79, 0xc3, 0x12,
	0xeb, 0x88, 0xc0, 0x0e, 0x6b, 0xb3, 0x75, 0x1b, 0x66, 0xfb, 0x88, 0x5c, 0x01, 0x4b, 0x33, 0x2e,
	0xce, 0x53, 0x59, 0x09, 0x83, 0xda, 0xea, 0xc5, 0x1b, 0x0e, 0xdc, 0x03, 0x2c, 0xfa, 0xfd, 0x12,
	0xe9, 0xef, 0x0b, 0xcd, 0x8a, 0x24, 0xf7, 0xf6, 0xc7, 0x15, 0x3a, 0x0d, 0x5b, 0xdf, 0x25, 0xfd,
	0x8c, 0xe9, 0x54, 0xf1, 0x12, 0x95, 0x6e, 0x17, 0x6f, 0x42, 0xb0, 0x67, 0x6d, 0xa8, 0x32, 0xb8,
	0x7e, 0x2f, 0xb6, 0x44, 0x30, 0x20, 0x5d, 0x26, 0x32, 0xb7, 0x2c, 0x7c, 0x82, 0x7d, 0x12, 0x2e,
	0x71, 0xa7, 0x3d, 0x9c, 0xc5, 0x93, 0xa0, 0xbe, 0x11, 0x13, 0xb2, 0xf0, 0xb6, 0x71, 0x94, 0x55,
	0xab, 0xa2, 0x22, 0x0b, 0x57, 0xbd, 0x5a, 0x81, 0x0a, 0xee, 0x93, 0x2d, 0xcd, 0x5e, 0x9f, 0x2b,
	0x36, 0xe2, 0x52, 0x58, 0xa5, 0xac, 0xa1, 0xc0, 0x15, 0xcd, 0x5e, 0xc7, 0x88, 0xa2, 0x62, 0x3e,
	0x21, 0x2b, 0x89, 0xa2, 0x22, 0x1d, 0xa3, 0x59, 0x36, 0x77, 0xae, 0x3e, 0x06, 0xb7, 0x7f, 0xcc,
	0xec, 0x91, 0x2d, 0x2b, 0x76, 0x22, 0xd1, 0xef, 0x3a, 0x64, 0xed, 0x8c, 0xbe, 0x95, 0x97, 0x6a,
	0xe2, 0x0e, 0xe9, 0xa7, 0xb2, 0x28, 0xfc, 0x8a, 0x56, 0x13, 0xc4, 0x42, 0xde, 0x0e, 0x8a, 0x8a,
	0x57, 0x4e, 0x0f, 0xf8, 0x1d, 0x7c, 0x4a, 0x02, 0x43, 0xdf, 0x4a, 0x21, 0x0b, 0x9e, 0x9e, 0x67,
	0x7c, 0xc2, 0xf5, 0xd4, 0x75, 0xb7, 0x6b, 0xce, 0x33, 0xc7, 0x88, 0x6e, 0x91, 0xd5, 0x7d, 0x41,
	0x2f, 0x0b, 0xc6, 0xe8, 0x67, 0x64, 0xf5, 0x24, 0x4b, 0x90, 0x7d, 0x83, 0xac, 0x14, 0xcc, 0x8c,
	0x65, 0xe6, 0x04, 0x1c, 0x05, 0x78, 0x3a, 0xa6, 0x5c, 0x68, 0xb7, 0x41, 0x47, 0x05, 0xb7, 0x09,
	0x51, 0x4c, 0xcb, 0xbc, 0x42, 0x33, 0xba, 0xc8, 0x9a, 0x22, 0x51, 0x44, 0x36, 0x9e, 0xa9, 0x6a,
	0x94, 0x50, 0xf1, 0xea, 0x32, 0x0d, 0x44, 0x0f, 0xc9, 0xc6, 0xb1, 0x2a, 0xc7, 0x54, 0x30, 0x83,
	0x32, 0x21, 0x59, 0xcd, 0xb8, 0x66, 0x54, 0x7b, 0x31, 0x4f, 0x82, 0x64, 0xcc, 0x68, 0x6a, 0x64,
	0xc1, 0xbc, 0x64, 0x49, 0xcd, 0xf8, 0x0d, 0xbd, 0xf0, 0x92, 0x8e, 0x8c, 0xfe, 0xd3, 0x21, 0xfd,
	0x97, 0x82, 0x83, 0x5f, 0xa2, 0xe4, 0x6d, 0x42, 0x68, 0x9a, 0x32, 0x0d, 0xea, 0xf0, 0x61, 0xd0,
	0x40, 0xc0, 0xdb, 0x20, 0x7e, 0x7c, 0xea, 0xb0, 0xc4, 0x34, 0x6e, 0xba, 0xcd, 0xb8, 0xf9, 0x84,
	0x6c, 0xd3, 0xdc, 0x30, 0x25, 0xa8, 0xe1, 0x13, 0xe6, 0xe2, 0x7b, 0x19, 0x25, 0x06, 0x0d, 0x86,
	0x0d, 0xf3, 0x07, 0x64, 0x4b, 0x57, 0x49, 0xc1, 0x8d, 0x61, 0x99, 0x13, 0xb5, 0x69, 0x64, 0xb3,
	0x86, 0xad, 0xe0, 0xa7, 0x64, 0x4d, 0xb3, 0xd7, 0x15, 0x13, 0x29, 0x43, 0xbf, 0xec, 0xef, 0x6c,
	0x5b, 0xbf, 0x7a, 0x29, 0xf8, 0xa9, 0x63, 0xc4, 0xb5, 0x08, 0xa4, 0x2c, 0xc5, 0x26, 0x9c, 0xbd,
	0x61, 0x19, 0x7a, 0xe9, 0x5a, 0x5c, 0xd3, 0xd1, 0x13, 0x3c, 0xbb, 0x1f, 0x04, 0x31, 0xa3, 0xd9,
	0x6b, 0xa7, 0x21, 0xf8, 0x04, 0x2b, 0x14, 0x54, 0x5b, 0x5b, 0xf6, 0x62, 0xfc, 0x8e, 0xfe, 0xdb,
	0x21, 0x81, 0xd3, 0xd8, 0x73, 0x46, 0x4d, 0xa5, 0xd8, 0xa5, 0xc9, 0xfb, 0x9b, 0x83, 0x77, 0x93,
	0x2c, 0xf1, 0xcc, 0xb9, 0xc3, 0x12, 0xcf, 0x82, 0x1f, 0x92, 0x75, 0x36, 0xe1, 0x19, 0x6c, 0xc7,
	0xaa, 0xaa, 0xbf, 0x73, 0xb3, 0x3e, 0x5d, 0x63, 0xc9, 0x7d, 0x27, 0x14, 0x4f, 0xc5, 0xe1, 0xa4,
	0x52, 0xf1, 0x11, 0x17, 0x34, 0x77, 0x11, 0x5e, 0xd3, 0xc1, 0x4d, 0xb2, 0x3e, 0xa1, 0x8a, 0xdb,
	0xcc, 0xed, 0x32, 0x70, 0x0d, 0x80, 0x4a, 0xeb, 0xb4, 0x3e, 0xab, 0xd2, 0x43, 0xc7, 0x98, 0x66,
	0xfa, 0xe8, 0x8c, 0xdc, 0x58, 0xbc, 0x9b, 0x85, 0x4a, 0x80, 0x2c, 0x22, 0x2b, 0x95, 0xfa, 0x90,
	0x75, 0xd4, 0xec, 0xd1, 0xa3, 0xcf, 0xd1, 0x18, 0x7e, 0x39, 0x70, 0xa9, 0x84, 0x8d, 0xb8, 0xc0,
	0xb9, 0x7a, 0xb1, 0x25, 0x7c, 0x5a, 0x5b, 0xaa, 0xd3, 0x5a, 0xf4, 0x8f, 0x25, 0x42, 0xf6, 0xc6,
	0x75, 0x0e, 0xbd, 0x4f, 0xba, 0x99, 0x4c, 0x71, 0x50, 0x7f, 0xe7, 0x9a, 0x3d, 0x85, 0x65, 0x3f,
	0x93, 0x69, 0x55, 0x30, 0x61, 0x62, 0x10, 0x08, 0x1e, 0x90, 0x1e, 0xd5, 0x9a, 0x5e, 0xe0, 0x54,
	0xf5, 0x79, 0xdd, 0x44, 0xc0, 0x88, 0x2d, 0x3f, 0xf8, 0x8c, 0xac, 0xd1, 0xd4, 0xf0, 0x09, 0x37,
	0x17, 0xb8, 0xd9, 0x99, 0x59, 0x77, 0x1d, 0x2f, 0xae, 0xa5, 0x60, 0x44, 0x21, 0x73, 0x96, 0x56,
	0x39, 0xc3, 0x4c, 0x33, 0x33, 0xe2, 0x85, 0xe3, 0xc5, 0xb5, 0x54, 0xf0, 0x88, 0xac, 0x18, 0xaa,
	0x46, 0xcc, 0xa0, 0xdd, 0xfa, 0x3b, 0x41, 0x53, 0xfe, 0x0c, 0x39, 0xb1, 0x93, 0x08, 0xf6, 0xc9,
	0x96, 0xfd, 0xda, 0x93, 0x45, 0x29, 0x05, 0x13, 0x06, 0xed, 0xd9, 0xdf, 0xf9, 0x70, 0x7e, 0x50,
	0x2d, 0x12, 0xcf, 0x8e, 0x81, 0x4d, 0xa6, 0x2c, 0xcf, 0x0f, 0xb9, 0xf0, 0x51, 0xd4, 0xda, 0xe4,
	0x9e, 0xe3, 0xc5, 0xb5, 0x54, 0xf4, 0xdb, 0x0e, 0xd9, 0x6c, 0x6b, 0x12, 0x6c, 0x64, 0xb8, 0xc9,
	0xbd, 0xbd, 0x2d, 0x51, 0x3b, 0xc1, 0x52, 0xc3, 0x09, 0x42, 0xb2, 0xfa, 0x4b, 0x59, 0x29, 0x70,
	0x4d, 0x6b, 0x71, 0x4f, 0x06, 0x8f, 0xc8, 0xc0, 0x7d, 0x9e, 0xfa, 0x1b, 0xd5, 0xe5, 0xe7, 0x39,
	0x3c, 0xfa, 0x67, 0xd7, 0x6f, 0xc1, 0xab, 0x7d, 0xa1, 0xc7, 0x61, 0xc8, 0xe7, 0xb4, 0x11, 0x73,
	0x35, 0x0d, 0x5b, 0x9e, 0xd0, 0xbc, 0xb2, 0xb7, 0x75, 0x27, 0xb6, 0x04, 0xa0, 0x95, 0xe0, 0x46,
	0xbb, 0x95, 0x2d, 0x11, 0x44, 0x64, 0x43, 0x1b, 0x2a, 0x32, 0xaa, 0xb2, 0xb3, 0xe9, 0xb5, 0xd9,
	0xc2, 0x60, 0xfb, 0x9e, 0x8e, 0xfd, 0x9a, 0x36, 0xbe, 0xe6, 0xf0, 0xe0, 0x63, 0x72, 0xc5, 0x63,
	0x5f, 0xe3, 0x1e, 0x56, 0x71, 0x0f, 0x6d, 0xb0, 0x29, 0xf5, 0x12, 0xf7, 0xe4, 0xef, 0xd6, 0x26,
	0x18, 0x7c, 0x9f, 0x6c, 0x67, 0xd4, 0xd0, 0xaf, 0x69, 0xce, 0x33, 0x6e, 0x2e, 0x0e, 0xb4, 0xae,
	0x98, 0xab, 0x7e, 0xe6, 0x19, 0xc1, 0x67, 0xe4, 0x6a, 0x13, 0xdc, 0x93, 0x05, 0xd8, 0x2f, 0x24,
	0x28, 0xbf, 0x88, 0x85, 0x37, 0x86, 0x55, 0x75, 0xd8, 0xc7, 0x5d, 0x7a, 0x32, 0x78, 0x48, 0xb6,
	0xbc, 0xab, 0xfb, 0x79, 0x36, 0x70, 0x9e, 0x59, 0x38, 0x78, 0x4c, 0x82, 0x52, 0x1a, 0x26, 0x0c,
	0xa7, 0xf9, 0xb3, 0xaa, 0xcc, 0x79, 0x4a, 0x0d, 0x0b, 0xaf, 0xa0, 0xf0, 0x02, 0x0e, 0x04, 0x77,
	0x42, 0x65, 0xb8, 0x69, 0xf3, 0x6f, 0x42, 0x65, 0xf4, 0xc7, 0xbe, 0x37, 0xb8, 0x8f, 0x1a, 0x30,
	0x38, 0x24, 0x50, 0x6f, 0x70, 0xf8, 0x0e, 0xbe, 0x20, 0xef, 0x8d, 0xf9, 0x68, 0xcc, 0xb4, 0x79,
	0xc6, 0x26, 0x2c, 0x97, 0x25, 0x2c, 0x7f, 0x32, 0x86, 0x8b, 0xd1, 0x66, 0x8a, 0xcb, 0xd8, 0xe0,
	0x2a, 0x34, 0x47, 0xe7, 0xaa, 0x4b, 0x69, 0x4f, 0x83, 0x8a, 0xa9, 0x49, 0xf7, 0x72, 0xaa, 0x35,
	0x1f, 0xf2, 0xba, 0xea, 0x05, 0xa1, 0x79, 0x06, 0x38, 0x02, 0xd7, 0x4f, 0xb9, 0x34, 0x63, 0xa6,
	0x68, 0xc9, 0x2a, 0xc3, 0x53, 0xe7, 0x30, 0x73, 0x38, 0x38, 0xd6, 0x98, 0xe5, 0xc5, 0x91, 0x34,
	0x4d, 0x87, 0x69, 0x61, 0xa0, 0xbc, 0xb1, 0xa2, 0xb3, 0xcb, 0xdb, 0x42, 0x6c, 0x01, 0x07, 0xe4,
	0x87, 0xf3, 0xf2, 0xd6, 0x77, 0x16, 0x70, 0x40, 0x9e, 0xcf, 0xcb, 0x5b, 0x0f, 0x5a, 0xc0, 0xa9,
	0x03, 0x8d, 0x34, 0x02, 0xed, 0x11, 0x19, 0x24, 0x5c, 0xd6, 0x49, 0x05, 0x83, 0xa4, 0x6f, 0xcf,
	0x3c, 0x8b, 0x83, 0x8d, 0x9a, 0xd8, 0xb3, 0xc6, 0xbd, 0x68, 0xdd, 0xe7, 0x32, 0x36, 0x38, 0x6f,
	0x93, 0x75, 0xea, 0xee, 0x7e, 0xeb, 0x47, 0x8b, 0x58, 0x73, 0xfb, 0xa2, 0x6f, 0xbd, 0x57, 0xcd,
	0xe1, 0xc1, 0x17, 0xa4, 0xcf, 0x45, 0xe6, 0x4e, 0xa9, 0xc3, 0x2d, 0xbc, 0x73, 0x6f, 0x34, 0x73,
	0xe1, 0x41, 0xcd, 0x8e, 0x9b, 0xa2, 0x70, 0xb1, 0x95, 0x54, 0x81, 0xff, 0x0f, 0xec, 0xc5, 0x66,
	0x29, 0x5b, 0x02, 0xf2, 0x3c, 0xd3, 0xe1, 0x36, 0x3a, 0x8b, 0xa3, 0x82, 0x27, 0x64, 0xbd, 0x60,
	0xe9, 0x98, 0x0a, 0xae, 0x8b, 0x30, 0xc0, 0x9c, 0x7b, 0xbd, 0x75, 0x31, 0x78, 0x66, 0x3c, 0x95,
	0x83, 0xcc, 0xc4, 0x45, 0x3a, 0xe6, 0xe1, 0x55, 0x9b, 0x99, 0x90, 0xa8, 0xab, 0xc3, 0x6b, 0xed,
	0xae, 0x10, 0x99, 0x3f, 0x61, 0x17, 0xe1, 0x75, 0x9b, 0xf5, 0x3c, 0x8d, 0x77, 0x70, 0xc1, 0x73,
	0xa6, 0xc3, 0x1b, 0xee, 0x0e, 0x46, 0x0a, 0x66, 0xa7, 0xb9, 0x1c, 0x95, 0xe1, 0x7b, 0x36, 0x1b,
	0x22, 0x11, 0xdc, 0x27, 0x9b, 0x6f, 0x18, 0x1f, 0x8d, 0xcd, 0x73, 0xc5, 0x58, 0x02, 0x51, 0x14,
	0x22, 0x7b, 0x06, 0x85, 0x78, 0x1d, 0x27, 0x34, 0x7c, 0x1f, 0x99, 0xf0, 0x69, 0x91, 0x2c, 0xfc,
	0xc0, 0x23, 0x19, 0x20, 0xa5, 0xa6, 0xe1, 0x87, 0x16, 0x29, 0x35, 0xca, 0x28, 0x93, 0x84, 0x37,
	0x2d, 0xa2, 0x4c, 0x02, 0xb9, 0x46, 0xc9, 0x27, 0x27, 0x50, 0x68, 0xdd, 0xb2, 0x97, 0x83, 0x23,
	0xc1, 0x90, 0xa2, 0x2a, 0x62, 0xf9, 0xf9, 0xd7, 0x5c, 0xe6, 0xce, 0x42, 0xb7, 0x71, 0xe0, 0x1c,
	0x0e, 0xc5, 0x16, 0x4d, 0xb3, 0x17, 0x52, 0x9b, 0xdd, 0xf2, 0x15, 0x0d, 0xef, 0xa0, 0x58, 0x13,
	0x6a, 0x48, 0x3c, 0x05, 0x89, 0xbb, 0x2d, 0x09, 0x80, 0xb0, 0x87, 0x4d, 0xb3, 0x43, 0xd0, 0xc8,
	0x3d, 0x9b, 0xf5, 0x1c, 0x39, 0xe5, 0x64, 0x61, 0xd4, 0xe4, 0x64, 0xb0, 0x47, 0x77, 0x91, 0x53,
	0x75, 0x5a, 0xb2, 0x94, 0x33, 0x1d, 0x7e, 0x64, 0x9d, 0x6d, 0x16, 0x07, 0x3b, 0x58, 0x1d, 0x86,
	0x1f, 0xe3, 0x24, 0x8e, 0x82, 0x9c, 0x4f, 0x95, 0x2c, 0xa8, 0xe1, 0x69, 0xcc, 0xc5, 0x48, 0x87,
	0xdf, 0xb5, 0x37, 0x43, 0x0b, 0x84, 0xda, 0x7c, 0xcc, 0xe8, 0xe4, 0x62, 0xd7, 0xc8, 0x42, 0x87,
	0xf7, 0x51, 0xa4, 0x81, 0xc0, 0x1e, 0x87, 0x52, 0x15, 0x55, 0x4e, 0xc3, 0x07, 0x56, 0x8f, 0x8e,
	0x84, 0x60, 0xb7, 0x2b, 0xbd, 0x90, 0x42, 0x72, 0x2d, 0x8d, 0x2c, 0x79, 0x1a, 0x3e, 0xc4, 0x19,
	0x16, 0x70, 0x40, 0x53, 0xaf, 0x59, 0xf6, 0x53, 0x64, 0xb0, 0x2c, 0xfc, 0x9e, 0xd5, 0x54, 0x03,
	0x8a, 0xfe, 0xde, 0x21, 0x83, 0xd9, 0xf0, 0x80, 0x0d, 0xb0, 0xa1, 0x3c, 0x9a, 0xf6, 0x2d, 0x9e,
	0x84, 0x09, 0x0b, 0xa6, 0xc7, 0x5f, 0x31, 0x9a, 0x71, 0x31, 0xf2, 0x95, 0x70, 0x03, 0x7a, 0x57,
	0x0e, 0xef, 0xbe, 0x3b, 0x87, 0x43, 0x4d, 0x38, 0x94, 0xee, 0xea, 0x86, 0x4f, 0x2c, 0xdb, 0x99,
	0x1e, 0xbb, 0xfc, 0x8b, 0xdf, 0xed, 0xe8, 0x5b, 0xf9, 0x76, 0xd1, 0x17, 0xfd, 0xab, 0x4b, 0x36,
	0x9a, 0x05, 0xd5, 0x25, 0x15, 0xcf, 0x7d, 0xb2, 0xc9, 0xb5, 0xb3, 0x31, 0xbe, 0x2c, 0xb8, 0x03,
	0xce, 0xa0, 0x0b, 0x5f, 0x0a, 0x6e, 0x92, 0x75, 0x5d, 0x25, 0x9a, 0x19, 0x39, 0xf4, 0xcd, 0xd1,
	0x14, 0x00, 0xbd, 0xb1, 0xd7, 0x15, 0x9f, 0xd0, 0x9c, 0x09, 0xe3, 0x3b, 0xa2, 0x26, 0x84, 0xaf,
	0x39, 0x28, 0xae, 0xc3, 0x15, 0xf7, 0x9a, 0x63, 0x49, 0xec, 0x07, 0x26, 0x4c, 0xe5, 0xb4, 0xf4,
	0xaf, 0x2a, 0x35, 0x1d, 0xfc, 0x80, 0xf4, 0x13, 0xc8, 0x65, 0x62, 0x74, 0xca, 0x8d, 0x6d, 0xdf,
	0xfb, 0x3b, 0xef, 0x35, 0xf5, 0xf1, 0x74, 0xca, 0x8e, 0x9b, 0xb2, 0xc1, 0x4b, 0xb2, 0x5d, 0x9a,
	0xb4, 0x75, 0x39, 0xe8, 0x70, 0x1d, 0xd3, 0xe6, 0x83, 0xe6, 0x04, 0x27, 0xf6, 0xa9, 0xc3, 0x55,
	0xa2, 0x2d, 0xf9, 0x78, 0x7e, 0x86, 0xe0, 0xc7, 0x04, 0x7a, 0x79, 0x9b, 0x98, 0xed, 0x53, 0x4d,
	0x7f, 0xe7, 0xce, 0x3b, 0x4a, 0xda, 0x03, 0x31, 0x94, 0x71, 0x63, 0x48, 0xdb, 0xc0, 0xfd, 0x6f,
	0x99, 0x5e, 0x07, 0xa4, 0x6b, 0xe8, 0x5b, 0x77, 0x03, 0xc1, 0x67, 0xf4, 0x1b, 0x72, 0xef, 0x1b,
	0xf7, 0x0f, 0x46, 0xc3, 0xfd, 0x37, 0x5c, 0x7d, 0x0a, 0x40, 0x9c, 0x22, 0x71, 0x08, 0x9e, 0x5a,
	0x3f, 0x54, 0xd4, 0x48, 0x3d, 0xfa, 0x84, 0x9a, 0xb1, 0xf3, 0x85, 0x29, 0x10, 0xfd, 0xa9, 0xae,
	0xb3, 0x7d, 0x11, 0xbe, 0xb0, 0xe6, 0xf9, 0x98, 0x5c, 0x81, 0xd2, 0x5c, 0x6a, 0x5a, 0xa9, 0x4a,
	0x1f, 0x64, 0x6e, 0x9d, 0x36, 0xe8, 0x63, 0xa3, 0x3b, 0x8d, 0x8d, 0x01, 0xe9, 0xa6, 0x79, 0x1d,
	0x2d, 0x69, 0x2e, 0xbd, 0x0e, 0x7a, 0xb5, 0x0e, 0xc0, 0x73, 0x60, 0x9a, 0xb7, 0x8a, 0x0d, 0x9d,
	0x53, 0xd5, 0x74, 0xb4, 0x4b, 0xde, 0xbf, 0xd4, 0x1e, 0x0b, 0xab, 0xf1, 0x01, 0xe9, 0xd2, 0x34,
	0x75, 0xdb, 0x83, 0xcf, 0xe8, 0x6f, 0x1d, 0x72, 0x7d, 0xe1, 0x1c, 0x0b, 0x0f, 0x6a, 0x4b, 0xb4,
	0x43, 0x9a, 0xd4, 0xba, 0xac, 0xe9, 0x85, 0x01, 0xb5, 0xd0, 0x3f, 0x97, 0xff, 0x6f, 0xff, 0x74,
	0xc7, 0xe8, 0xd5, 0xc7, 0xf0, 0x7a, 0x5b, 0x99, 0xfa, 0xce, 0x5f, 0xbb, 0xa4, 0xdf, 0x68, 0x21,
	0x17, 0x1e, 0x67, 0x51, 0x77, 0x74, 0x9f, 0x6c, 0xfa, 0xfe, 0x4c, 0x0c, 0xa1, 0xf4, 0x71, 0x07,
	0x9a, 0x41, 0xc1, 0xe6, 0x16, 0x89, 0x59, 0x8e, 0xc5, 0x96, 0xb5, 0x62, 0x1b, 0x6c, 0x49, 0xe1,
	0x64, 0xbd, 0x19, 0x29, 0x9c, 0xeb, 0xe1, 0xb4, 0x8f, 0x14, 0xc3, 0xd3, 0x54, 0x2a, 0xfb, 0xfa,
	0xd7, 0x8b, 0x67, 0x61, 0xc8, 0x41, 0xba, 0x4a, 0xc0, 0x19, 0x9f, 0x2b, 0x9a, 0xba, 0x12, 0xb4,
	0x09, 0x81, 0x89, 0x0c, 0xd3, 0xb6, 0xfe, 0xb3, 0x15, 0x67, 0x4d, 0xfb, 0x47, 0x44, 0x2e, 0xa6,
	0x6f, 0xb3, 0x40, 0x79, 0x1f, 0x3b, 0x9b, 0xd6, 0x94, 0x35, 0x0d, 0x63, 0x0c, 0xc7, 0x8e, 0xc6,
	0x56, 0x93, 0x8e, 0x9a, 0x8f, 0x56, 0x9c, 0x85, 0x1a, 0x36, 0x92, 0xea, 0xc2, 0x15, 0x84, 0x35,
	0xdd, 0x78, 0x78, 0xd8, 0x6c, 0x3d, 0x3c, 0xdc, 0x26, 0xc4, 0x7e, 0xa1, 0x72, 0xb6, 0x6c, 0x78,
	0x4e, 0x11, 0xdf, 0x86, 0x0c, 0xa6, 0x6d, 0xc8, 0x2f, 0xc8, 0xf6, 0x5c, 0x52, 0x5c, 0xf8, 0x46,
	0xd9, 0xca, 0x41, 0x4b, 0xdf, 0xf2, 0x92, 0xf9, 0x11, 0xd9, 0x9a, 0xe1, 0x2e, 0x74, 0x9c, 0x1b,
	0x64, 0x05, 0x1a, 0xac, 0xba, 0xa7, 0x75, 0x54, 0xf4, 0xef, 0x65, 0xb2, 0xf6, 0x55, 0xe1, 0x9e,
	0x25, 0x17, 0x6d, 0xca, 0x4f, 0xb6, 0xd4, 0x98, 0xac, 0xfd, 0xcc, 0xd7, 0x9d, 0x7b, 0xe6, 0x6b,
	0xfe, 0x62, 0x58, 0x6e, 0xff, 0x62, 0x00, 0x9e, 0x7b, 0x67, 0xf4, 0x17, 0x52, 0x4d, 0x37, 0x4b,
	0x90, 0x95, 0x76, 0x09, 0x02, 0x25, 0xce, 0x84, 0x29, 0x3a, 0x62, 0xb6, 0x86, 0xf0, 0xcd, 0x6f,
	0x0b, 0x84, 0x9e, 0xab, 0x90, 0xc2, 0xd7, 0x21, 0x4e, 0x72, 0x0d, 0x25, 0xe7, 0x19, 0x90, 0x48,
	0x79, 0x55, 0xd2, 0x14, 0xd3, 0xb0, 0x75, 0xaf, 0x29, 0xd0, 0x28, 0x7a, 0xc9, 0x6c, 0xd1, 0x6b,
	0x4b, 0xea, 0x7e, 0xb3, 0xa4, 0x6e, 0x96, 0xcf, 0x1b, 0x33, 0xe5, 0xf3, 0x63, 0xd2, 0x2b, 0x95,
	0x2c, 0x35, 0x3a, 0x52, 0x7f, 0x27, 0xb4, 0x26, 0x05, 0xa5, 0x9f, 0x28, 0x96, 0xf1, 0xd4, 0xb0,
	0xec, 0x04, 0xf8, 0xb1, 0x15, 0x0b, 0x0e, 0xc8, 0x36, 0x7b, 0x5b, 0x32, 0xc5, 0xa1, 0x48, 0xa1,
	0x39, 0xf2, 0xd0, 0xd1, 0xea, 0x57, 0x1a, 0x18, 0xbb, 0x3f, 0x2b, 0x12, 0xcf, 0x8f, 0x02, 0x85,
	0x40, 0x58, 0x40, 0x11, 0xe9, 0x9f, 0xc6, 0x74, 0x38, 0xb0, 0x4d, 0xe8, 0x1c, 0x03, 0x1a, 0xcb,
	0x84, 0x4b, 0x0d, 0x35, 0x47, 0xc1, 0x84, 0x6f, 0x40, 0x5a, 0x18, 0x06, 0x3e, 0x86, 0xd3, 0x74,
	0xbe, 0x00, 0xc5, 0x66, 0x61, 0x50, 0x89, 0x7b, 0x26, 0xd6, 0xe1, 0x55, 0x6b, 0x68, 0x4f, 0x47,
	0x7f, 0x58, 0x21, 0xc1, 0xbc, 0x02, 0xa0, 0xd0, 0x54, 0xd0, 0xc1, 0xd2, 0x24, 0x67, 0x4f, 0xa5,
	0xc8, 0xf0, 0x47, 0x87, 0x7b, 0xc2, 0x5b, 0xc0, 0x81, 0xde, 0xae, 0x1c, 0x5f, 0x68, 0x2e, 0x73,
	0x39, 0xe2, 0x29, 0xcd, 0xf7, 0xc6, 0x90, 0x7c, 0x5c, 0xd7, 0xbe, 0x88, 0x85, 0x0f, 0xe9, 0x55,
	0xce, 0x8e, 0x87, 0xcf, 0xf9, 0x84, 0xd5, 0x0f, 0xe9, 0x35, 0x82, 0x8f, 0x0e, 0xaf, 0xe8, 0xa9,
	0x51, 0x52, 0x8c, 0x98, 0x36, 0xbb, 0x29, 0xcf, 0x78, 0x8a, 0x89, 0xb2, 0x13, 0x2f, 0xe0, 0xc0,
	0x21, 0x0b, 0x29, 0xe4, 0x0b, 0xe8, 0x3e, 0x7a, 0x28, 0x55, 0xd3, 0xc1, 0x3d, 0xb2, 0x31, 0x1a,
	0x4b, 0xcd, 0xce, 0x87, 0x3c, 0x37, 0x4c, 0x39, 0x97, 0xee, 0x23, 0xf6, 0x1c, 0x21, 0xd0, 0xb8,
	0x62, 0xd0, 0x5e, 0xbb, 0x27, 0x42, 0xeb, 0xd5, 0x2d, 0x0c, 0x64, 0x20, 0x0a, 0xea, 0xd3, 0x59,
	0x7f, 0x6e, 0x61, 0x60, 0x95, 0x84, 0x4b, 0x3a, 0xa1, 0x3c, 0xa7, 0x09, 0xcf, 0x61, 0xaa, 0x75,
	0x14, 0x9b, 0x85, 0x6d, 0xfa, 0xca, 0x2b, 0x27, 0x44, 0x7c, 0xfa, 0xf2, 0x48, 0xf0, 0x98, 0x5c,
	0x2d, 0x5f, 0xd1, 0x73, 0xed, 0xcf, 0x79, 0x9e, 0x50, 0xcd, 0x53, 0xf7, 0x8a, 0xb3, 0xdd, 0xd4,
	0xc0, 0x53, 0x60, 0x40, 0xff, 0x52, 0x4a, 0xe8, 0x51, 0x2a, 0x35, 0xa4, 0x29, 0xdb, 0x55, 0x8c,
	0x62, 0x00, 0x74, 0xe2, 0x39, 0x1c, 0x9f, 0x91, 0x59, 0xc2, 0x54, 0x5c, 0xe5, 0xbe, 0x01, 0x9f,
	0x02, 0x70, 0xce, 0x22, 0xcb, 0xd4, 0x21, 0x7f, 0xc5, 0x50, 0xc0, 0xa6, 0xdd, 0x16, 0x06, 0xc9,
	0x08, 0x1b, 0xce, 0x2d, 0x5c, 0x61, 0xd9, 0xf7, 0x9b, 0xb8, 0x12, 0xff, 0x95, 0x3f, 0xfa, 0xc0,
	0xf6, 0x9b, 0x6d, 0x14, 0x4e, 0x9e, 0x49, 0x21, 0x95, 0x75, 0xaa, 0x6d, 0xf4, 0x91, 0x06, 0x82,
	0xfd, 0x9d, 0xcd, 0x26, 0x68, 0xcd, 0xc0, 0xf5, 0x77, 0x53, 0x08, 0x93, 0x50, 0x9a, 0xb2, 0xd2,
	0xf8, 0x49, 0xae, 0xe2, 0x24, 0x6d, 0x10, 0xa4, 0x44, 0x55, 0x24, 0x4c, 0x1d, 0x0f, 0x6d, 0x37,
	0x76, 0xcd, 0x4a, 0xb5, 0x40, 0x77, 0x12, 0x8d, 0xbd, 0xb6, 0x3d, 0x89, 0x8e, 0xfe, 0xdc, 0x21,
	0xd7, 0x17, 0x86, 0x36, 0x46, 0xa6, 0x94, 0x39, 0x17, 0xa3, 0x13, 0xc9, 0x5d, 0x48, 0x40, 0x64,
	0x36, 0x30, 0xd4, 0x1f, 0xcb, 0x4d, 0x2d, 0xb3, 0xe4, 0xf4, 0xd7, 0xc0, 0x6a, 0xfd, 0x75, 0x1b,
	0xfa, 0x7b, 0x48, 0xb6, 0xde, 0x50, 0xc3, 0xd4, 0xe9, 0xd4, 0x2d, 0x6c, 0x61, 0x30, 0x0b, 0x3f,
	0xca, 0xc8, 0x95, 0xd6, 0xdf, 0xb7, 0x60, 0x8d, 0x2c, 0x1f, 0x1d, 0x1f, 0xed, 0x0f, 0xbe, 0x13,
	0xf4, 0xc9, 0xea, 0xfe, 0xd1, 0xe9, 0xfe, 0x8b, 0xa7, 0x87, 0x83, 0x4e, 0xb0, 0x41, 0xd6, 0x9e,
	0xee, 0xee, 0x9d, 0xed, 0xc7, 0x07, 0xbb, 0x83, 0xa5, 0x60, 0x9d, 0xf4, 0x9e, 0xbf, 0x3c, 0xfa,
	0xf2, 0x60, 0xd0, 0x05, 0xa9, 0x17, 0xfb, 0x67, 0xbb, 0x3f, 0x3f, 0xde, 0x1d, 0x2c, 0x03, 0x7e,
	0x72, 0xb8, 0x7b, 0x74, 0x36, 0xe8, 0x01, 0x7e, 0x12, 0x1f, 0x9f, 0x1d, 0x9c, 0x9e, 0x0d, 0x56,
	0x92, 0x15, 0xfc, 0xc9, 0xfd, 0xe4, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x66, 0x0e, 0x85, 0xd7,
	0xf2, 0x1e, 0x00, 0x00,
}
